{"file":"C:\\Github\\Algoo\\core\\src\\utils\\assertions.ts","mappings":";;AAMA,oCAKC;AAQD,0BAKC;AAQD,sCAQC;AAxCD;;;;;GAKG;AACH,SAAgB,YAAY,CAAI,MAAqB,EAAE,KAAa;IAClE,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;QACzB,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;IACzD,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;;GAKG;AACH,SAAgB,OAAO,CAAI,MAAgB,EAAE,KAAa;IACxD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;QAC5C,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACjE,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAC3B,MAAgB,EAChB,KAAkC,EAClC,GAAG,IAAU;IAEb,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE,CAAC;QAC5C,MAAM,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACrF,CAAC;AACH,CAAC","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\utils\\assertions.ts"],"sourcesContent":["/**\n * Throw an error if the object is undefined. Otherwise, return the object in a not-undefined type.\n * @param object Object to check\n * @param error Error to throw if the object is undefined\n * @returns Object in a not-undefined type\n */\nexport function notUndefined<T>(object: T | undefined, error?: Error): T {\n  if (object === undefined) {\n    throw error || new Error('Given object is undefined.');\n  }\n  return object;\n}\n\n/**\n * Throw an error if the object is null. Otherwise, return the object in a not-null type.\n * @param object Object to check\n * @param error Error to throw if the object is null\n * @returns Object in a not-null type\n */\nexport function notNull<T>(object: T | null, error?: Error): T {\n  if (object === undefined || object === null) {\n    throw error || new Error('Given object is null or undefined.');\n  }\n  return object;\n}\n\n/**\n * Throw an error if the object is either undefined or null.\n * @param object Object to check\n * @param error Error class to throw if the object is undefined or null\n * @param args Arguments to pass to the error class constructor\n */\nexport function assertNonNull<T, Err extends Error, Args extends unknown[]>(\n  object: T | null,\n  error?: new (...args: Args) => Err,\n  ...args: Args\n): asserts object is NonNullable<T> {\n  if (object === undefined || object === null) {\n    throw error ? new error(...args) : new Error('Given object is null or undefined.');\n  }\n}\n"],"version":3}