{"file":"C:\\Github\\Algoo\\backend\\src\\utils\\logger.ts","mappings":";;;;;;AAwCA,sBAEC;AAED,gCAGC;AA9CD,oDAA4B;AAC5B,qCAAmE;AAEnE,MAAM,OAAO,GAAG;IACd,OAAO,EAAE;QACP,gBAAgB,EAAE,IAAI;QACtB,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,gBAAM,CAAC,OAAO,CACpB,gBAAM,CAAC,SAAS,EAAE,EAClB,gBAAM,CAAC,QAAQ,EAAE,EACjB,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;YAC9C,OAAO,IAAI,SAAS,KAAK,KAAK,KAAK,OAAO,EAAE,CAAC;QAC/C,CAAC,CAAC,CACH;KACF;IACD,OAAO,EAAE;QACP,QAAQ,EAAE,eAAe,IAAA,gBAAM,GAAE,CAAC,MAAM,CAAC,aAAa,CAAC,MAAM;QAC7D,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,gBAAM,CAAC,OAAO,CACpB,gBAAM,CAAC,SAAS,EAAE,EAClB,gBAAM,CAAC,MAAM,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;YAC9C,OAAO,IAAI,SAAS,KAAK,KAAK,KAAK,OAAO,EAAE,CAAC;QAC/C,CAAC,CAAC,CACH;KACF;CACF,CAAC;AAEF;;GAEG;AACU,QAAA,MAAM,GAAW,IAAA,sBAAY,EAAC;IACzC,UAAU,EAAE,CAAC,IAAI,oBAAU,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,IAAI,oBAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3F,MAAM,EAAE,gBAAM,CAAC,OAAO,CAAC,gBAAM,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;CACvD,CAAC,CAAC;AAEH;;;GAGG;AACH,SAAgB,KAAK,CAAC,GAAY;IAChC,OAAO,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,aAAa,CAAC;AACpE,CAAC;AAED,SAAgB,UAAU,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;IACxE,cAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;IACzD,IAAI,EAAE,CAAC;AACT,CAAC","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\utils\\logger.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport moment from 'moment';\nimport { Logger, createLogger, format, transports } from 'winston';\n\nconst OPTIONS = {\n  console: {\n    handleExceptions: true,\n    level: 'debug',\n    format: format.combine(\n      format.timestamp(),\n      format.colorize(),\n      format.printf(({ timestamp, level, message }) => {\n        return `[${timestamp}] ${level}: ${message}`;\n      }),\n    ),\n  },\n  verbose: {\n    filename: `./logs/logs-${moment().format('YYYYMMDD_HH')}.log`,\n    level: 'debug',\n    format: format.combine(\n      format.timestamp(),\n      format.printf(({ timestamp, level, message }) => {\n        return `[${timestamp}] ${level}: ${message}`;\n      }),\n    ),\n  },\n};\n\n/**\n * @description Winston logger instance\n */\nexport const LOGGER: Logger = createLogger({\n  transports: [new transports.Console(OPTIONS.console), new transports.File(OPTIONS.verbose)],\n  format: format.combine(format.errors({ stack: true })),\n});\n\n/**\n * @description Get the IP of the request\n * @param req Express Request\n */\nexport function getIP(req: Request) {\n  return req.headers['x-forwarded-for'] || req.socket.remoteAddress;\n}\n\nexport function middleware(req: Request, res: Response, next: NextFunction) {\n  LOGGER.info(`${getIP(req)}: [${req.method}] ${req.url}`);\n  next();\n}\n"],"version":3}