d662f81e3fd2ebcd598f39ff5841241b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LOGGER = void 0;
exports.getIP = getIP;
exports.middleware = middleware;
const moment_1 = __importDefault(require("moment"));
const winston_1 = require("winston");
const OPTIONS = {
    console: {
        handleExceptions: true,
        level: 'debug',
        format: winston_1.format.combine(winston_1.format.timestamp(), winston_1.format.colorize(), winston_1.format.printf(({ timestamp, level, message }) => {
            return `[${timestamp}] ${level}: ${message}`;
        })),
    },
    verbose: {
        filename: `./logs/logs-${(0, moment_1.default)().format('YYYYMMDD_HH')}.log`,
        level: 'debug',
        format: winston_1.format.combine(winston_1.format.timestamp(), winston_1.format.printf(({ timestamp, level, message }) => {
            return `[${timestamp}] ${level}: ${message}`;
        })),
    },
};
/**
 * @description Winston logger instance
 */
exports.LOGGER = (0, winston_1.createLogger)({
    transports: [new winston_1.transports.Console(OPTIONS.console), new winston_1.transports.File(OPTIONS.verbose)],
    format: winston_1.format.combine(winston_1.format.errors({ stack: true })),
});
/**
 * @description Get the IP of the request
 * @param req Express Request
 */
function getIP(req) {
    return req.headers['x-forwarded-for'] || req.socket.remoteAddress;
}
function middleware(req, res, next) {
    exports.LOGGER.info(`${getIP(req)}: [${req.method}] ${req.url}`);
    next();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGJhY2tlbmRcXHNyY1xcdXRpbHNcXGxvZ2dlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUF3Q0Esc0JBRUM7QUFFRCxnQ0FHQztBQTlDRCxvREFBNEI7QUFDNUIscUNBQW1FO0FBRW5FLE1BQU0sT0FBTyxHQUFHO0lBQ2QsT0FBTyxFQUFFO1FBQ1AsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxnQkFBTSxDQUFDLE9BQU8sQ0FDcEIsZ0JBQU0sQ0FBQyxTQUFTLEVBQUUsRUFDbEIsZ0JBQU0sQ0FBQyxRQUFRLEVBQUUsRUFDakIsZ0JBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtZQUM5QyxPQUFPLElBQUksU0FBUyxLQUFLLEtBQUssS0FBSyxPQUFPLEVBQUUsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FDSDtLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsUUFBUSxFQUFFLGVBQWUsSUFBQSxnQkFBTSxHQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNO1FBQzdELEtBQUssRUFBRSxPQUFPO1FBQ2QsTUFBTSxFQUFFLGdCQUFNLENBQUMsT0FBTyxDQUNwQixnQkFBTSxDQUFDLFNBQVMsRUFBRSxFQUNsQixnQkFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1lBQzlDLE9BQU8sSUFBSSxTQUFTLEtBQUssS0FBSyxLQUFLLE9BQU8sRUFBRSxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUNIO0tBQ0Y7Q0FDRixDQUFDO0FBRUY7O0dBRUc7QUFDVSxRQUFBLE1BQU0sR0FBVyxJQUFBLHNCQUFZLEVBQUM7SUFDekMsVUFBVSxFQUFFLENBQUMsSUFBSSxvQkFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxvQkFBVSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0YsTUFBTSxFQUFFLGdCQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7Q0FDdkQsQ0FBQyxDQUFDO0FBRUg7OztHQUdHO0FBQ0gsU0FBZ0IsS0FBSyxDQUFDLEdBQVk7SUFDaEMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7QUFDcEUsQ0FBQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLElBQWtCO0lBQ3hFLGNBQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUN6RCxJQUFJLEVBQUUsQ0FBQztBQUNULENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXEdpdGh1YlxcQWxnb29cXGJhY2tlbmRcXHNyY1xcdXRpbHNcXGxvZ2dlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIGNyZWF0ZUxvZ2dlciwgZm9ybWF0LCB0cmFuc3BvcnRzIH0gZnJvbSAnd2luc3Rvbic7XG5cbmNvbnN0IE9QVElPTlMgPSB7XG4gIGNvbnNvbGU6IHtcbiAgICBoYW5kbGVFeGNlcHRpb25zOiB0cnVlLFxuICAgIGxldmVsOiAnZGVidWcnLFxuICAgIGZvcm1hdDogZm9ybWF0LmNvbWJpbmUoXG4gICAgICBmb3JtYXQudGltZXN0YW1wKCksXG4gICAgICBmb3JtYXQuY29sb3JpemUoKSxcbiAgICAgIGZvcm1hdC5wcmludGYoKHsgdGltZXN0YW1wLCBsZXZlbCwgbWVzc2FnZSB9KSA9PiB7XG4gICAgICAgIHJldHVybiBgWyR7dGltZXN0YW1wfV0gJHtsZXZlbH06ICR7bWVzc2FnZX1gO1xuICAgICAgfSksXG4gICAgKSxcbiAgfSxcbiAgdmVyYm9zZToge1xuICAgIGZpbGVuYW1lOiBgLi9sb2dzL2xvZ3MtJHttb21lbnQoKS5mb3JtYXQoJ1lZWVlNTUREX0hIJyl9LmxvZ2AsXG4gICAgbGV2ZWw6ICdkZWJ1ZycsXG4gICAgZm9ybWF0OiBmb3JtYXQuY29tYmluZShcbiAgICAgIGZvcm1hdC50aW1lc3RhbXAoKSxcbiAgICAgIGZvcm1hdC5wcmludGYoKHsgdGltZXN0YW1wLCBsZXZlbCwgbWVzc2FnZSB9KSA9PiB7XG4gICAgICAgIHJldHVybiBgWyR7dGltZXN0YW1wfV0gJHtsZXZlbH06ICR7bWVzc2FnZX1gO1xuICAgICAgfSksXG4gICAgKSxcbiAgfSxcbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uIFdpbnN0b24gbG9nZ2VyIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBjb25zdCBMT0dHRVI6IExvZ2dlciA9IGNyZWF0ZUxvZ2dlcih7XG4gIHRyYW5zcG9ydHM6IFtuZXcgdHJhbnNwb3J0cy5Db25zb2xlKE9QVElPTlMuY29uc29sZSksIG5ldyB0cmFuc3BvcnRzLkZpbGUoT1BUSU9OUy52ZXJib3NlKV0sXG4gIGZvcm1hdDogZm9ybWF0LmNvbWJpbmUoZm9ybWF0LmVycm9ycyh7IHN0YWNrOiB0cnVlIH0pKSxcbn0pO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvbiBHZXQgdGhlIElQIG9mIHRoZSByZXF1ZXN0XG4gKiBAcGFyYW0gcmVxIEV4cHJlc3MgUmVxdWVzdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVAocmVxOiBSZXF1ZXN0KSB7XG4gIHJldHVybiByZXEuaGVhZGVyc1sneC1mb3J3YXJkZWQtZm9yJ10gfHwgcmVxLnNvY2tldC5yZW1vdGVBZGRyZXNzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWlkZGxld2FyZShyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6IE5leHRGdW5jdGlvbikge1xuICBMT0dHRVIuaW5mbyhgJHtnZXRJUChyZXEpfTogWyR7cmVxLm1ldGhvZH1dICR7cmVxLnVybH1gKTtcbiAgbmV4dCgpO1xufVxuIl0sInZlcnNpb24iOjN9