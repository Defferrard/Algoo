e2e50a7a66e8a8be8fc91bdac0702c63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const strategy_1 = require("../../strategy");
const lodash_1 = require("lodash");
class Spell {
    color;
    iconPath;
    name;
    minimalRangeTarget;
    maximalRangeTarget;
    targetDistanceStrategy;
    minimalRangeAttacked;
    maximalRangeAttacked;
    attackedDistanceStrategy;
    cost;
    _actions;
    constructor(dto) {
        this.color = dto.color;
        this.iconPath = dto.iconPath;
        this.name = dto.name;
        this.minimalRangeTarget = dto.minimalRangeTarget;
        this.maximalRangeTarget = dto.maximalRangeTarget;
        this.targetDistanceStrategy = strategy_1.DISTANCE_STRATEGIES[dto.targetDistanceStrategy];
        this.minimalRangeAttacked = dto.minimalRangeAttacked;
        this.maximalRangeAttacked = dto.maximalRangeAttacked;
        this.attackedDistanceStrategy = strategy_1.DISTANCE_STRATEGIES[dto.attackedDistanceStrategy];
        this.cost = dto.cost;
        this._actions = dto.actions.map((action) => {
            return {
                strategy: strategy_1.ACTION_STRATEGIES[action.type],
                type: action.type,
                args: action.args,
            };
        });
    }
    cast(by, from, to, on) {
        const RESUME = [];
        if (!by.pay(this.cost))
            return RESUME;
        for (let action of this._actions) {
            RESUME.push(action.strategy(this, by, this.attackedTiles(from, to, on).map((c) => on.getTile(c)), action.args));
        }
        return RESUME;
    }
    targetableTiles(from, board, _filter) {
        const map = board.mapNodes;
        let targetable = [...map.flat()].filter((n) => (0, lodash_1.inRange)(this.targetDistanceStrategy(from, n), this.minimalRangeTarget, this.maximalRangeTarget + 1));
        return targetable;
    }
    attackedTiles(from, to, board) {
        const map = board.mapNodes;
        let attacked = [...map.flat()].filter((n) => (0, lodash_1.inRange)(this.attackedDistanceStrategy(to, n), this.minimalRangeAttacked, this.maximalRangeAttacked + 1));
        return attacked;
    }
}
exports.default = Spell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FDcEcsQ0FBQztRQUVGLE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBc0IsRUFBRSxFQUFvQixFQUFFLEtBQVk7UUFDdEUsTUFBTSxHQUFHLEdBQWEsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNyQyxJQUFJLFFBQVEsR0FBaUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU8sRUFBRSxFQUFFLENBQzlELElBQUEsZ0JBQU8sRUFBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEdBQUcsQ0FBQyxDQUFDLENBQ3hHLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUE5RUQsd0JBOEVDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxHaXRodWJcXEFsZ29vXFxjb3JlXFxzcmNcXGdhbWVcXHNwZWxsXFxTcGVsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbG9yLCBSZXNvdXJjZXMgfSBmcm9tICcuLi8nO1xuaW1wb3J0IHR5cGUgeyBCb2FyZCwgQ29vcmRpbmF0ZSwgU2ltcGxlQ29vcmRpbmF0ZSB9IGZyb20gJy4uLy4uL2JvYXJkJztcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uLy4uL2JvYXJkJztcbmltcG9ydCB7IFNwZWxsRFRPIH0gZnJvbSAnLi4vLi4vZHRvJztcbmltcG9ydCB0eXBlIHsgTm9kZSB9IGZyb20gJy4uLy4uL3BhdGhmaW5kaW5nJztcbmltcG9ydCB0eXBlIHsgRGlzdGFuY2VTdHJhdGVneUNhbGxhYmxlIH0gZnJvbSAnLi4vLi4vc3RyYXRlZ3knO1xuaW1wb3J0IHsgQUNUSU9OX1NUUkFURUdJRVMsIEFjdGlvblN0cmF0ZWd5LCBESVNUQU5DRV9TVFJBVEVHSUVTIH0gZnJvbSAnLi4vLi4vc3RyYXRlZ3knO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb25SZXN1bWUsIEFjdGlvblN0cmF0ZWd5Q2FsbGFibGUgfSBmcm9tICcuLi8uLi9zdHJhdGVneSc7XG5pbXBvcnQgeyBpblJhbmdlIH0gZnJvbSAnbG9kYXNoJztcblxudHlwZSBTcGVsbEFjdGlvbiA9IHtcbiAgc3RyYXRlZ3k/OiBBY3Rpb25TdHJhdGVneUNhbGxhYmxlO1xuICB0eXBlOiBBY3Rpb25TdHJhdGVneTtcbiAgYXJnczogeyBba2V5IGluIHN0cmluZ106IGFueSB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BlbGwge1xuICByZWFkb25seSBjb2xvcjogQ29sb3I7XG4gIHJlYWRvbmx5IGljb25QYXRoOiBzdHJpbmc7XG5cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIHJlYWRvbmx5IG1pbmltYWxSYW5nZVRhcmdldDogbnVtYmVyO1xuICByZWFkb25seSBtYXhpbWFsUmFuZ2VUYXJnZXQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgdGFyZ2V0RGlzdGFuY2VTdHJhdGVneTogRGlzdGFuY2VTdHJhdGVneUNhbGxhYmxlO1xuXG4gIHJlYWRvbmx5IG1pbmltYWxSYW5nZUF0dGFja2VkOiBudW1iZXI7XG4gIHJlYWRvbmx5IG1heGltYWxSYW5nZUF0dGFja2VkOiBudW1iZXI7XG4gIHJlYWRvbmx5IGF0dGFja2VkRGlzdGFuY2VTdHJhdGVneTogRGlzdGFuY2VTdHJhdGVneUNhbGxhYmxlO1xuXG4gIHJlYWRvbmx5IGNvc3Q6IFJlc291cmNlcztcblxuICBwcml2YXRlIHJlYWRvbmx5IF9hY3Rpb25zOiBTcGVsbEFjdGlvbltdO1xuXG4gIGNvbnN0cnVjdG9yKGR0bzogU3BlbGxEVE8pIHtcbiAgICB0aGlzLmNvbG9yID0gZHRvLmNvbG9yO1xuICAgIHRoaXMuaWNvblBhdGggPSBkdG8uaWNvblBhdGg7XG4gICAgdGhpcy5uYW1lID0gZHRvLm5hbWU7XG5cbiAgICB0aGlzLm1pbmltYWxSYW5nZVRhcmdldCA9IGR0by5taW5pbWFsUmFuZ2VUYXJnZXQ7XG4gICAgdGhpcy5tYXhpbWFsUmFuZ2VUYXJnZXQgPSBkdG8ubWF4aW1hbFJhbmdlVGFyZ2V0O1xuICAgIHRoaXMudGFyZ2V0RGlzdGFuY2VTdHJhdGVneSA9IERJU1RBTkNFX1NUUkFURUdJRVNbZHRvLnRhcmdldERpc3RhbmNlU3RyYXRlZ3khXTtcblxuICAgIHRoaXMubWluaW1hbFJhbmdlQXR0YWNrZWQgPSBkdG8ubWluaW1hbFJhbmdlQXR0YWNrZWQ7XG4gICAgdGhpcy5tYXhpbWFsUmFuZ2VBdHRhY2tlZCA9IGR0by5tYXhpbWFsUmFuZ2VBdHRhY2tlZDtcbiAgICB0aGlzLmF0dGFja2VkRGlzdGFuY2VTdHJhdGVneSA9IERJU1RBTkNFX1NUUkFURUdJRVNbZHRvLmF0dGFja2VkRGlzdGFuY2VTdHJhdGVneSFdO1xuXG4gICAgdGhpcy5jb3N0ID0gZHRvLmNvc3Q7XG5cbiAgICB0aGlzLl9hY3Rpb25zID0gZHRvLmFjdGlvbnMubWFwKChhY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0cmF0ZWd5OiBBQ1RJT05fU1RSQVRFR0lFU1thY3Rpb24udHlwZV0sXG4gICAgICAgIHR5cGU6IGFjdGlvbi50eXBlLFxuICAgICAgICBhcmdzOiBhY3Rpb24uYXJncyxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBjYXN0KGJ5OiBFbnRpdHk8UmVzb3VyY2VzPiwgZnJvbTogU2ltcGxlQ29vcmRpbmF0ZSwgdG86IFNpbXBsZUNvb3JkaW5hdGUsIG9uOiBCb2FyZCk6IEFjdGlvblJlc3VtZVtdIHtcbiAgICBjb25zdCBSRVNVTUU6IEFjdGlvblJlc3VtZVtdID0gW107XG5cbiAgICBpZiAoIWJ5LnBheSh0aGlzLmNvc3QpKSByZXR1cm4gUkVTVU1FO1xuXG4gICAgZm9yIChsZXQgYWN0aW9uIG9mIHRoaXMuX2FjdGlvbnMpIHtcbiAgICAgIFJFU1VNRS5wdXNoKFxuICAgICAgICBhY3Rpb24uc3RyYXRlZ3khKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgYnksXG4gICAgICAgICAgdGhpcy5hdHRhY2tlZFRpbGVzKGZyb20sIHRvLCBvbikubWFwKChjOiBDb29yZGluYXRlKSA9PiBvbi5nZXRUaWxlKGMpKSxcbiAgICAgICAgICBhY3Rpb24uYXJncyxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJFU1VNRTtcbiAgfVxuXG4gIHRhcmdldGFibGVUaWxlcyhmcm9tOiBTaW1wbGVDb29yZGluYXRlLCBib2FyZDogQm9hcmQsIF9maWx0ZXI6IFNpbXBsZUNvb3JkaW5hdGVbXSk6IFNpbXBsZUNvb3JkaW5hdGVbXSB7XG4gICAgY29uc3QgbWFwOiBOb2RlW11bXSA9IGJvYXJkLm1hcE5vZGVzO1xuICAgIGxldCB0YXJnZXRhYmxlOiBDb29yZGluYXRlW10gPSBbLi4ubWFwLmZsYXQoKV0uZmlsdGVyKChuOiBOb2RlKSA9PlxuICAgICAgaW5SYW5nZSh0aGlzLnRhcmdldERpc3RhbmNlU3RyYXRlZ3koZnJvbSwgbiksIHRoaXMubWluaW1hbFJhbmdlVGFyZ2V0LCB0aGlzLm1heGltYWxSYW5nZVRhcmdldCArIDEpLFxuICAgICk7XG5cbiAgICByZXR1cm4gdGFyZ2V0YWJsZTtcbiAgfVxuXG4gIGF0dGFja2VkVGlsZXMoZnJvbTogU2ltcGxlQ29vcmRpbmF0ZSwgdG86IFNpbXBsZUNvb3JkaW5hdGUsIGJvYXJkOiBCb2FyZCk6IENvb3JkaW5hdGVbXSB7XG4gICAgY29uc3QgbWFwOiBOb2RlW11bXSA9IGJvYXJkLm1hcE5vZGVzO1xuICAgIGxldCBhdHRhY2tlZDogQ29vcmRpbmF0ZVtdID0gWy4uLm1hcC5mbGF0KCldLmZpbHRlcigobjogTm9kZSkgPT5cbiAgICAgIGluUmFuZ2UodGhpcy5hdHRhY2tlZERpc3RhbmNlU3RyYXRlZ3kodG8sIG4pLCB0aGlzLm1pbmltYWxSYW5nZUF0dGFja2VkLCB0aGlzLm1heGltYWxSYW5nZUF0dGFja2VkICsgMSksXG4gICAgKTtcblxuICAgIHJldHVybiBhdHRhY2tlZDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9