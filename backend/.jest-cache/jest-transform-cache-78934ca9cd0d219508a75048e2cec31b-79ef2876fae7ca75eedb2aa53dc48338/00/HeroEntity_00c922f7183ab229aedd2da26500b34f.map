{"file":"C:\\Github\\Algoo\\core\\src\\game\\hero\\HeroEntity.ts","mappings":";;;;;AASA,oCAUC;AAnBD,gEAAwC;AAIxC,kEAA+D;AAC/D,wFAAwG;AACxG,2DAAmC;AAGnC,SAAgB,YAAY,CAAC,MAA0B;IACrD,OAAO,CACL,MAAM,KAAK,SAAS;QACnB,MAAqB,CAAC,IAAI,KAAK,SAAS;QACxC,MAAqB,CAAC,KAAK,KAAK,SAAS;QACzC,MAAqB,CAAC,eAAe,KAAK,SAAS;QACnD,MAAqB,CAAC,MAAM,KAAK,SAAS;QAC1C,MAAqB,CAAC,OAAO,KAAK,SAAS;QAC3C,MAAqB,CAAC,MAAM,KAAK,SAAS,CAC5C,CAAC;AACJ,CAAC;AAED,MAAqB,UAAW,SAAQ,gBAAyB;IACtD,IAAI,CAAS;IACb,KAAK,CAAS;IACd,eAAe,CAA0B;IACzC,MAAM,CAAU;IAChB,OAAO,CAAW;IAC3B,MAAM,CAAS;IAEf,YAAY,GAAoB;QAC9B,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAE3B,iGAAiG;QACjG,MAAM,eAAe,GAA4B,IAAI,iDAAuB,CAC1E;YACE,CAAC,2BAAY,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,eAAe,CAAC,2BAAY,CAAC,MAAM,CAAC;YAC/D,CAAC,2BAAY,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,eAAe,CAAC,2BAAY,CAAC,OAAO,CAAC;SAClE,EACD,GAAG,CAAC,eAAe,CAAC,QAAQ,EAC5B,GAAG,CAAC,eAAe,CAAC,UAAU,EAC9B,GAAG,CAAC,eAAe,CAAC,UAAU,CAC/B,CAAC;QAEF,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,eAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;IAC3B,CAAC;IAED,SAAS;QACP,IAAI,CAAC,SAAS,CAAC,2BAAY,CAAC,OAAO,CAAE,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;QACzE,IAAI,CAAC,SAAS,CAAC,2BAAY,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAC7C,IAAI,CAAC,SAAS,CAAC,2BAAY,CAAC,OAAO,CAAE,EACrC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,2BAAY,CAAC,OAAO,CAAE,CAChD,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,IAAkB,EAAE,cAAyC;QAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC;QACxC,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAC3C,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAE,EAAE,CAAC;YAC5D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;QACzD,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,SAAS,CAAC;IAC3C,CAAC;CACF;AA9CD,6BA8CC","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\game\\hero\\HeroEntity.ts"],"sourcesContent":["import Entity from '../../board/Entity';\nimport { CompleteHeroDTO } from '../../dto/CompleteHeroDTO';\nimport Effect from '../Effect';\nimport { Resources } from '../characteristics/Characteristics';\nimport { ResourceType } from '../characteristics/ResourceType';\nimport { StandardCharacteristics, StandardResources } from '../characteristics/StandardCharacteristics';\nimport Spell from '../spell/Spell';\nimport { Stance } from './Stance';\n\nexport function isHeroEntity(entity?: Entity<Resources>): entity is HeroEntity {\n  return (\n    entity !== undefined &&\n    (entity as HeroEntity).name !== undefined &&\n    (entity as HeroEntity).title !== undefined &&\n    (entity as HeroEntity).characteristics !== undefined &&\n    (entity as HeroEntity).spells !== undefined &&\n    (entity as HeroEntity).effects !== undefined &&\n    (entity as HeroEntity).stance !== undefined\n  );\n}\n\nexport default class HeroEntity extends Entity<StandardResources> {\n  readonly name: string;\n  readonly title: string;\n  readonly characteristics: StandardCharacteristics;\n  readonly spells: Spell[];\n  readonly effects: Effect[];\n  stance: Stance;\n\n  constructor(dto: CompleteHeroDTO) {\n    super(dto.characteristics);\n\n    // TODO : Can we simplify ? (Can we generate maxResources dynamically from dto.characteristics ?)\n    const CHARACTERISTICS: StandardCharacteristics = new StandardCharacteristics(\n      {\n        [ResourceType.HEALTH]: dto.characteristics[ResourceType.HEALTH],\n        [ResourceType.STAMINA]: dto.characteristics[ResourceType.STAMINA],\n      },\n      dto.characteristics.strength,\n      dto.characteristics.resistance,\n      dto.characteristics.durability,\n    );\n\n    this.name = dto.name;\n    this.title = dto.title;\n    this.characteristics = CHARACTERISTICS;\n    this.spells = dto.spells.map((spell) => new Spell(spell));\n    this.effects = [];\n    this.stance = dto.stance;\n  }\n\n  onEndTurn() {\n    this.resources[ResourceType.STAMINA]! += this.characteristics.durability;\n    this.resources[ResourceType.STAMINA] = Math.min(\n      this.resources[ResourceType.STAMINA]!,\n      this.characteristics.max[ResourceType.STAMINA]!,\n    );\n  }\n\n  updateResource(type: ResourceType, updateFunction: (value: number) => number): number {\n    const OLD_VALUE = this.resources[type]!;\n    super.updateResource(type, updateFunction);\n    if (this.resources[type]! > this.characteristics.max[type]!) {\n      this.resources[type] = this.characteristics.max[type]!;\n    }\n    return this.resources[type]! - OLD_VALUE;\n  }\n}\n"],"version":3}