3d7d67dc48919bbdbfc6324017a129fe
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_1 = require("@defferrard/algoo-core/src/socket");
const http_1 = require("http");
require("reflect-metadata");
const routing_controllers_1 = require("routing-controllers");
const socket_io_client_1 = require("socket.io-client");
const typedi_1 = require("typedi");
const app_1 = require("~/app");
const socketio_1 = __importDefault(require("~/socketio"));
const utils_1 = require("~/test/utils");
const BASE_URL = '/rooms';
const AUTH_BASE_URL = '/api/v1/auth';
describe(`Socket Base Test ${BASE_URL}`, () => {
    let httpServer;
    let ioServer;
    let socket;
    beforeAll(() => {
        (0, routing_controllers_1.useContainer)(typedi_1.Container);
        httpServer = (0, http_1.createServer)(app_1.app);
        ioServer = (0, socketio_1.default)(httpServer);
        httpServer.listen();
    });
    afterEach(() => {
        socket.close();
        typedi_1.Container.reset();
    });
    afterAll(() => {
        ioServer.close();
        httpServer.close();
    });
    test('Connect without authentication', async () => {
        socket = (0, socket_io_client_1.io)(`http://localhost/`, {
            retries: 0,
        });
        socket.connect();
        let res = await (0, utils_1.socketOnce)(socket, socket_1.MessageType.CONNECT_ERROR);
        expect(res.context.statusText.code).toBe('ECONNREFUSED');
    });
    test('Authenticate', async () => {
        // request(app).post(`${AUTH_BASE_URL}`).expect(Status.UNAUTHORIZED);
        // socket.connect();
        //
        // socket = io(`http://localhost/`, {
        //   retries: 0,
        // });
        // socket.once(MessageType.CONNECT_ERROR, (err: any) => {
        //   expect(err.context.statusText.code).toBe('ECONNREFUSED');
        //   done();
        // });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGJhY2tlbmRcXHNyY1xcc29ja2V0XFxjb250cm9sbGVyc1xcZ2FtZVJvb20udGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhEQUFnRTtBQUNoRSwrQkFBMkQ7QUFDM0QsNEJBQTBCO0FBQzFCLDZEQUFtRDtBQUVuRCx1REFBOEM7QUFDOUMsbUNBQW1DO0FBQ25DLCtCQUE0QjtBQUM1QiwwREFBOEI7QUFDOUIsd0NBQTBDO0FBRTFDLE1BQU0sUUFBUSxHQUFXLFFBQVEsQ0FBQztBQUNsQyxNQUFNLGFBQWEsR0FBVyxjQUFjLENBQUM7QUFDN0MsUUFBUSxDQUFDLG9CQUFvQixRQUFRLEVBQUUsRUFBRSxHQUFHLEVBQUU7SUFDNUMsSUFBSSxVQUF1QixDQUFDO0lBQzVCLElBQUksUUFBa0IsQ0FBQztJQUN2QixJQUFJLE1BQWMsQ0FBQztJQUNuQixTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBQSxrQ0FBWSxFQUFDLGtCQUFTLENBQUMsQ0FBQztRQUN4QixVQUFVLEdBQUcsSUFBQSxtQkFBWSxFQUFDLFNBQUcsQ0FBQyxDQUFDO1FBQy9CLFFBQVEsR0FBRyxJQUFBLGtCQUFJLEVBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUIsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3RCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNmLGtCQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ1osUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pCLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRCxNQUFNLEdBQUcsSUFBQSxxQkFBRSxFQUFDLG1CQUFtQixFQUFFO1lBQy9CLE9BQU8sRUFBRSxDQUFDO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLElBQUksR0FBRyxHQUFHLE1BQU0sSUFBQSxrQkFBVSxFQUFDLE1BQU0sRUFBRSxvQkFBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlCLHFFQUFxRTtRQUNyRSxvQkFBb0I7UUFDcEIsRUFBRTtRQUNGLHFDQUFxQztRQUNyQyxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLHlEQUF5RDtRQUN6RCw4REFBOEQ7UUFDOUQsWUFBWTtRQUNaLE1BQU07SUFDUixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxHaXRodWJcXEFsZ29vXFxiYWNrZW5kXFxzcmNcXHNvY2tldFxcY29udHJvbGxlcnNcXGdhbWVSb29tLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICdAZGVmZmVycmFyZC9hbGdvby1jb3JlL3NyYy9zb2NrZXQnO1xuaW1wb3J0IHsgU2VydmVyIGFzIEhUVFBTU2VydmVyLCBjcmVhdGVTZXJ2ZXIgfSBmcm9tICdodHRwJztcbmltcG9ydCAncmVmbGVjdC1tZXRhZGF0YSc7XG5pbXBvcnQgeyB1c2VDb250YWluZXIgfSBmcm9tICdyb3V0aW5nLWNvbnRyb2xsZXJzJztcbmltcG9ydCB7IFNlcnZlciBhcyBJT1NlcnZlciB9IGZyb20gJ3NvY2tldC5pbyc7XG5pbXBvcnQgeyBTb2NrZXQsIGlvIH0gZnJvbSAnc29ja2V0LmlvLWNsaWVudCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICd0eXBlZGknO1xuaW1wb3J0IHsgYXBwIH0gZnJvbSAnfi9hcHAnO1xuaW1wb3J0IGluaXQgZnJvbSAnfi9zb2NrZXRpbyc7XG5pbXBvcnQgeyBzb2NrZXRPbmNlIH0gZnJvbSAnfi90ZXN0L3V0aWxzJztcblxuY29uc3QgQkFTRV9VUkw6IHN0cmluZyA9ICcvcm9vbXMnO1xuY29uc3QgQVVUSF9CQVNFX1VSTDogc3RyaW5nID0gJy9hcGkvdjEvYXV0aCc7XG5kZXNjcmliZShgU29ja2V0IEJhc2UgVGVzdCAke0JBU0VfVVJMfWAsICgpID0+IHtcbiAgbGV0IGh0dHBTZXJ2ZXI6IEhUVFBTU2VydmVyO1xuICBsZXQgaW9TZXJ2ZXI6IElPU2VydmVyO1xuICBsZXQgc29ja2V0OiBTb2NrZXQ7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgdXNlQ29udGFpbmVyKENvbnRhaW5lcik7XG4gICAgaHR0cFNlcnZlciA9IGNyZWF0ZVNlcnZlcihhcHApO1xuICAgIGlvU2VydmVyID0gaW5pdChodHRwU2VydmVyKTtcbiAgICBodHRwU2VydmVyLmxpc3RlbigpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICBDb250YWluZXIucmVzZXQoKTtcbiAgfSk7XG4gIGFmdGVyQWxsKCgpID0+IHtcbiAgICBpb1NlcnZlci5jbG9zZSgpO1xuICAgIGh0dHBTZXJ2ZXIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgdGVzdCgnQ29ubmVjdCB3aXRob3V0IGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgIHNvY2tldCA9IGlvKGBodHRwOi8vbG9jYWxob3N0L2AsIHtcbiAgICAgIHJldHJpZXM6IDAsXG4gICAgfSk7XG5cbiAgICBzb2NrZXQuY29ubmVjdCgpO1xuICAgIGxldCByZXMgPSBhd2FpdCBzb2NrZXRPbmNlKHNvY2tldCwgTWVzc2FnZVR5cGUuQ09OTkVDVF9FUlJPUik7XG4gICAgZXhwZWN0KHJlcy5jb250ZXh0LnN0YXR1c1RleHQuY29kZSkudG9CZSgnRUNPTk5SRUZVU0VEJyk7XG4gIH0pO1xuXG4gIHRlc3QoJ0F1dGhlbnRpY2F0ZScsIGFzeW5jICgpID0+IHtcbiAgICAvLyByZXF1ZXN0KGFwcCkucG9zdChgJHtBVVRIX0JBU0VfVVJMfWApLmV4cGVjdChTdGF0dXMuVU5BVVRIT1JJWkVEKTtcbiAgICAvLyBzb2NrZXQuY29ubmVjdCgpO1xuICAgIC8vXG4gICAgLy8gc29ja2V0ID0gaW8oYGh0dHA6Ly9sb2NhbGhvc3QvYCwge1xuICAgIC8vICAgcmV0cmllczogMCxcbiAgICAvLyB9KTtcbiAgICAvLyBzb2NrZXQub25jZShNZXNzYWdlVHlwZS5DT05ORUNUX0VSUk9SLCAoZXJyOiBhbnkpID0+IHtcbiAgICAvLyAgIGV4cGVjdChlcnIuY29udGV4dC5zdGF0dXNUZXh0LmNvZGUpLnRvQmUoJ0VDT05OUkVGVVNFRCcpO1xuICAgIC8vICAgZG9uZSgpO1xuICAgIC8vIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9