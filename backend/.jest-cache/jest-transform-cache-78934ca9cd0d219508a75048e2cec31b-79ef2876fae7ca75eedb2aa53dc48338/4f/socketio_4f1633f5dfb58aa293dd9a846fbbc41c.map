{"file":"C:\\Github\\Algoo\\backend\\src\\socketio.ts","mappings":";;AAOA,uBA4BC;AAjCD,2DAAuD;AACvD,yCAAmC;AACnC,mCAAmC;AACnC,iCAAsC;AAEtC,SAAwB,IAAI,CAAC,UAAuB;IAClD,MAAM,EAAE,GAAW,IAAI,kBAAM,CAAC,UAAU,EAAE;QACxC,IAAI,EAAE,YAAY;KACnB,CAAC,CAAC;IACH,kBAAS,CAAC,GAAG,CAAC,kBAAM,EAAE,EAAE,CAAC,CAAC;IAC1B,EAAE,CAAC,MAAM,CAAC,GAAG,CACX,CACE,GAEC,EACD,GAAa,EACb,IAAkB,EAClB,EAAE;QACF,MAAM,WAAW,GAAY,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;QAC1D,IAAI,WAAW,EAAE,CAAC;YAChB,IAAA,mBAAY,EAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QAC/B,CAAC;aAAM,CAAC;YACN,IAAI,EAAE,CAAC;QACT,CAAC;IACH,CAAC,CACF,CAAC;IAEF,IAAI,sCAAiB,CAAC;QACpB,EAAE,EAAE,EAAE;QACN,SAAS,EAAE,kBAAS;QACpB,WAAW,EAAE,CAAC,SAAS,GAAG,6BAA6B,CAAC;KACzD,CAAC,CAAC;IACH,OAAO,EAAE,CAAC;AACZ,CAAC","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\socketio.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport type { Server as HTTPSServer } from 'http';\nimport { SocketControllers } from 'socket-controllers';\nimport { Server } from 'socket.io';\nimport { Container } from 'typedi';\nimport { authenticate } from '~/auth';\n\nexport default function init(httpServer: HTTPSServer): Server {\n  const io: Server = new Server(httpServer, {\n    path: '/socket.io',\n  });\n  Container.set(Server, io);\n  io.engine.use(\n    (\n      req: Request & {\n        _query: { sid: string | undefined };\n      },\n      res: Response,\n      next: NextFunction,\n    ) => {\n      const isHandshake: boolean = req._query.sid === undefined;\n      if (isHandshake) {\n        authenticate(req, res, next);\n      } else {\n        next();\n      }\n    },\n  );\n\n  new SocketControllers({\n    io: io,\n    container: Container,\n    controllers: [__dirname + '/socket/controllers/*Ctrl.*'],\n  });\n  return io;\n}\n"],"version":3}