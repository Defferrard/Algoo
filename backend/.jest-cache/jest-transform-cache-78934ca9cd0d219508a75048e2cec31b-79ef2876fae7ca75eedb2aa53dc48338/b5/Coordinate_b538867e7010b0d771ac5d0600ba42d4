a9f6e0ab044916e18b2e214c9a84530c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dto_1 = require("../dto");
class Coordinate {
    x;
    y;
    constructor(coordinate) {
        this.x = coordinate.x;
        this.y = coordinate.y;
    }
    toString() {
        return `(${this.x};${this.y})`;
    }
    /** @deprecated use equals instead */
    is(coordinate) {
        return this.x === coordinate.x && this.y === coordinate.y;
    }
    equals(coordinate) {
        return Coordinate.equals(this, coordinate);
    }
    static equals(a, b) {
        return !!a && !!b && a.x === b.x && a.y === b.y;
    }
    plus(coordinate) {
        return new Coordinate(Coordinate.plus(this, coordinate));
    }
    static plus(a, b) {
        return {
            x: a.x + b.x,
            y: a.y + b.y,
        };
    }
    minus(coordinate) {
        const x = this.x - coordinate.x;
        const y = this.y - coordinate.y;
        return new Coordinate({ x, y });
    }
    plusDirection(direction, distance) {
        return new Coordinate(Coordinate.plusDirection(this, direction, distance));
    }
    static plusDirection(coordinate, direction, distance) {
        return {
            x: coordinate.x + direction.x * distance,
            y: coordinate.y + direction.y * distance,
        };
    }
    normalized() {
        if (this.getLength() === 0) {
            return new Coordinate({ x: 0, y: 0 });
        }
        const x = this.x / this.getLength();
        const y = this.y / this.getLength();
        return new Coordinate({ x, y });
    }
    floored() {
        return new Coordinate(Coordinate.floored(this));
    }
    static floored(coordinate) {
        return {
            x: Math.floor(coordinate.x),
            y: Math.floor(coordinate.y),
        };
    }
    getLength() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    get neighbors() {
        return Coordinate.getNeighbors(this).map((simpleNeighbor) => new Coordinate(simpleNeighbor));
    }
    static getNeighbors(coordinate) {
        return [
            { x: coordinate.x - 1, y: coordinate.y },
            { x: coordinate.x + 1, y: coordinate.y },
            { x: coordinate.x, y: coordinate.y - 1 },
            { x: coordinate.x, y: coordinate.y + 1 },
        ];
    }
    isNeighbor(coordinate) {
        return Coordinate.isNeighbor(this, coordinate);
    }
    static isNeighbor(a, b) {
        return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) === 1;
    }
    toDTO() {
        return Coordinate.toDTO(this);
    }
    static toDTO(coordinate) {
        const dto = new dto_1.CoordinateDTO();
        dto.x = coordinate.x;
        dto.y = coordinate.y;
        return dto;
    }
}
exports.default = Coordinate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,