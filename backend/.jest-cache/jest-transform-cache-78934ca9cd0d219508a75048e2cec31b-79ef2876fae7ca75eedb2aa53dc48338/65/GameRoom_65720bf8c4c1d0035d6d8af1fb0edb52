3576caab63a11b170ec10a1bebfbaa63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameRoomState = void 0;
const dto_1 = require("../dto/");
const gameRoom_1 = require("../exceptions/gameRoom");
const uuid_1 = require("uuid");
var GameRoomState;
(function (GameRoomState) {
    GameRoomState[GameRoomState["LOBBY"] = 0] = "LOBBY";
    GameRoomState[GameRoomState["PLAYING"] = 1] = "PLAYING";
    GameRoomState[GameRoomState["DONE"] = 2] = "DONE";
})(GameRoomState || (exports.GameRoomState = GameRoomState = {}));
const DEFAULT_ROOM_SIZE = 2;
class GameRoom {
    uuid;
    maxPlayers;
    state;
    players; // Key = Player UUID = Team UUID
    owner;
    constructor(maxPlayers = DEFAULT_ROOM_SIZE, uuid = (0, uuid_1.v4)()) {
        this.uuid = uuid;
        this.state = GameRoomState.LOBBY;
        this.players = {};
        this.maxPlayers = maxPlayers;
    }
    toDTO() {
        const dto = new dto_1.SimpleGameRoomDTO();
        dto.uuid = this.uuid;
        dto.maxPlayers = this.maxPlayers;
        dto.currentPlayers = this.playersCount;
        dto.state = this.state;
        dto.owner = this.owner?.user.toDTO();
        return dto;
    }
    get playersCount() {
        return Object.keys(this.players).length;
    }
    addPlayer(player) {
        if (this.playersCount >= this.maxPlayers) {
            throw new gameRoom_1.FullGameRoomException(this.uuid);
        }
        if (this.players[player.user.uuid]) {
            throw new gameRoom_1.PlayerAlreadyInGameRoomException(player.user.uuid, this.uuid);
        }
        this.players[player.user.uuid] = player;
        if (!this.owner) {
            this.owner = player;
        }
    }
    removePlayer(uuid) {
        const player = this.players[uuid];
        delete this.players[uuid];
        if (this.owner?.user.uuid === uuid) {
            this.owner = Object.values(this.players)[0];
        }
        return player;
    }
    getPlayer(uuid) {
        return this.players[uuid];
    }
    /**
     * Set the player ready and return true if all players are ready
     * @param uuid Player UUID
     * @param isReady Player ready state
     */
    setPlayerReady(uuid, isReady) {
        this.players[uuid].isReady = isReady;
        return Object.values(this.players).every((player) => player.isReady);
    }
    startGame() {
        this.state = GameRoomState.PLAYING;
    }
}
exports.default = GameRoom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFFRCxTQUFTLENBQUMsSUFBWTtRQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsSUFBWSxFQUFFLE9BQWdCO1FBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUNyQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQW5FRCwyQkFtRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xcZ2FtZVxcR2FtZVJvb20udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRFRPRnJpZW5kbHkgfSBmcm9tICcuLi9kdG8nO1xuaW1wb3J0IHsgU2ltcGxlR2FtZVJvb21EVE8gfSBmcm9tICcuLi9kdG8vJztcbmltcG9ydCB7IEZ1bGxHYW1lUm9vbUV4Y2VwdGlvbiwgUGxheWVyQWxyZWFkeUluR2FtZVJvb21FeGNlcHRpb24gfSBmcm9tICcuLi9leGNlcHRpb25zL2dhbWVSb29tJztcbmltcG9ydCB7IEdhbWVNYW5hZ2VyLCBQbGF5ZXIgfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IHY0IGFzIHV1aWRWNCB9IGZyb20gJ3V1aWQnO1xuXG5leHBvcnQgZW51bSBHYW1lUm9vbVN0YXRlIHtcbiAgTE9CQlksXG4gIFBMQVlJTkcsXG4gIERPTkUsXG59XG5cbmNvbnN0IERFRkFVTFRfUk9PTV9TSVpFID0gMjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVSb29tIGltcGxlbWVudHMgRFRPRnJpZW5kbHk8U2ltcGxlR2FtZVJvb21EVE8+IHtcbiAgcmVhZG9ubHkgdXVpZDogc3RyaW5nO1xuICBtYXhQbGF5ZXJzOiBudW1iZXI7XG4gIHN0YXRlOiBHYW1lUm9vbVN0YXRlO1xuICByZWFkb25seSBwbGF5ZXJzOiB7IFtrZXk6IHN0cmluZ106IFBsYXllciB9OyAvLyBLZXkgPSBQbGF5ZXIgVVVJRCA9IFRlYW0gVVVJRFxuICBvd25lcj86IFBsYXllcjtcblxuICBjb25zdHJ1Y3RvcihtYXhQbGF5ZXJzOiBudW1iZXIgPSBERUZBVUxUX1JPT01fU0laRSwgdXVpZDogc3RyaW5nID0gdXVpZFY0KCkpIHtcbiAgICB0aGlzLnV1aWQgPSB1dWlkO1xuICAgIHRoaXMuc3RhdGUgPSBHYW1lUm9vbVN0YXRlLkxPQkJZO1xuICAgIHRoaXMucGxheWVycyA9IHt9O1xuICAgIHRoaXMubWF4UGxheWVycyA9IG1heFBsYXllcnM7XG4gIH1cblxuICB0b0RUTygpIHtcbiAgICBjb25zdCBkdG8gPSBuZXcgU2ltcGxlR2FtZVJvb21EVE8oKTtcbiAgICBkdG8udXVpZCA9IHRoaXMudXVpZDtcbiAgICBkdG8ubWF4UGxheWVycyA9IHRoaXMubWF4UGxheWVycztcbiAgICBkdG8uY3VycmVudFBsYXllcnMgPSB0aGlzLnBsYXllcnNDb3VudDtcbiAgICBkdG8uc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgIGR0by5vd25lciA9IHRoaXMub3duZXI/LnVzZXIudG9EVE8oKTtcbiAgICByZXR1cm4gZHRvO1xuICB9XG5cbiAgZ2V0IHBsYXllcnNDb3VudCgpOiBudW1iZXIge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLnBsYXllcnMpLmxlbmd0aDtcbiAgfVxuXG4gIGFkZFBsYXllcihwbGF5ZXI6IFBsYXllcik6IHZvaWQge1xuICAgIGlmICh0aGlzLnBsYXllcnNDb3VudCA+PSB0aGlzLm1heFBsYXllcnMpIHtcbiAgICAgIHRocm93IG5ldyBGdWxsR2FtZVJvb21FeGNlcHRpb24odGhpcy51dWlkKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucGxheWVyc1twbGF5ZXIudXNlci51dWlkXSkge1xuICAgICAgdGhyb3cgbmV3IFBsYXllckFscmVhZHlJbkdhbWVSb29tRXhjZXB0aW9uKHBsYXllci51c2VyLnV1aWQsIHRoaXMudXVpZCk7XG4gICAgfVxuICAgIHRoaXMucGxheWVyc1twbGF5ZXIudXNlci51dWlkXSA9IHBsYXllcjtcbiAgICBpZiAoIXRoaXMub3duZXIpIHtcbiAgICAgIHRoaXMub3duZXIgPSBwbGF5ZXI7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlUGxheWVyKHV1aWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHBsYXllciA9IHRoaXMucGxheWVyc1t1dWlkXTtcbiAgICBkZWxldGUgdGhpcy5wbGF5ZXJzW3V1aWRdO1xuICAgIGlmICh0aGlzLm93bmVyPy51c2VyLnV1aWQgPT09IHV1aWQpIHtcbiAgICAgIHRoaXMub3duZXIgPSBPYmplY3QudmFsdWVzKHRoaXMucGxheWVycylbMF07XG4gICAgfVxuICAgIHJldHVybiBwbGF5ZXI7XG4gIH1cblxuICBnZXRQbGF5ZXIodXVpZDogc3RyaW5nKTogUGxheWVyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5wbGF5ZXJzW3V1aWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcGxheWVyIHJlYWR5IGFuZCByZXR1cm4gdHJ1ZSBpZiBhbGwgcGxheWVycyBhcmUgcmVhZHlcbiAgICogQHBhcmFtIHV1aWQgUGxheWVyIFVVSURcbiAgICogQHBhcmFtIGlzUmVhZHkgUGxheWVyIHJlYWR5IHN0YXRlXG4gICAqL1xuICBzZXRQbGF5ZXJSZWFkeSh1dWlkOiBzdHJpbmcsIGlzUmVhZHk6IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgICB0aGlzLnBsYXllcnNbdXVpZF0uaXNSZWFkeSA9IGlzUmVhZHk7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5wbGF5ZXJzKS5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuaXNSZWFkeSk7XG4gIH1cblxuICBzdGFydEdhbWUoKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZSA9IEdhbWVSb29tU3RhdGUuUExBWUlORztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9