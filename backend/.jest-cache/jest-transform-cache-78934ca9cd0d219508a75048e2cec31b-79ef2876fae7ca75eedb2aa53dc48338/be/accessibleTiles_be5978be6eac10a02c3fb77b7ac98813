6cbfe3ae973021fbcff8228e78ea0491
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessibles = getAccessibles;
const board_1 = require("../board/");
const _1 = require("./");
function getAccessibles(from, maxCost, board, filter) {
    const accessible = [];
    const map = board.mapNodes;
    let openList = []; // Open list is the next set of tiles to evaluate
    const closedList = []; // Closed list is the set of tiles already evaluated
    let current = map[from.y][from.x]; // Start at the starting tile
    current.g = 0;
    openList.push(current); // Add the starting tile to the open list
    while (openList.length > 0) {
        current = openList[0];
        // Move the current tile from the open list to the closed list
        openList.splice(openList.indexOf(current), 1);
        closedList.push(current);
        if (current.g <= maxCost && filter?.some((otherCoordinate) => board_1.Coordinate.equals(otherCoordinate, current))) {
            accessible.push(current);
            (0, _1.checkNeighbors)(current, (0, _1.getNeighbors)(current, map), openList, closedList);
        }
    }
    // Remove the starting tile from the accessible tiles
    return accessible;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xccGF0aGZpbmRpbmdcXGFjY2Vzc2libGVUaWxlcy50cyIsIm1hcHBpbmdzIjoiOztBQUlBLHdDQTZCQztBQWpDRCxxQ0FBZ0U7QUFFaEUseUJBQWtEO0FBRWxELFNBQWdCLGNBQWMsQ0FDNUIsSUFBc0IsRUFDdEIsT0FBZSxFQUNmLEtBQVksRUFDWixNQUEwQjtJQUUxQixNQUFNLFVBQVUsR0FBdUIsRUFBRSxDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFhLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFFckMsSUFBSSxRQUFRLEdBQVcsRUFBRSxDQUFDLENBQUMsaURBQWlEO0lBQzVFLE1BQU0sVUFBVSxHQUFXLEVBQUUsQ0FBQyxDQUFDLG9EQUFvRDtJQUVuRixJQUFJLE9BQU8sR0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtJQUN0RSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNkLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyx5Q0FBeUM7SUFFakUsT0FBTyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQzNCLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsOERBQThEO1FBQzlELFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxPQUFPLElBQUksTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsa0JBQVUsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pCLElBQUEsaUJBQWMsRUFBQyxPQUFPLEVBQUUsSUFBQSxlQUFZLEVBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1RSxDQUFDO0lBQ0gsQ0FBQztJQUVELHFEQUFxRDtJQUNyRCxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxHaXRodWJcXEFsZ29vXFxjb3JlXFxzcmNcXHBhdGhmaW5kaW5nXFxhY2Nlc3NpYmxlVGlsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9hcmQsIENvb3JkaW5hdGUsIFNpbXBsZUNvb3JkaW5hdGUgfSBmcm9tICcuLi9ib2FyZC8nO1xuaW1wb3J0IHR5cGUgeyBOb2RlIH0gZnJvbSAnLi8nO1xuaW1wb3J0IHsgY2hlY2tOZWlnaGJvcnMsIGdldE5laWdoYm9ycyB9IGZyb20gJy4vJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjY2Vzc2libGVzKFxuICBmcm9tOiBTaW1wbGVDb29yZGluYXRlLFxuICBtYXhDb3N0OiBudW1iZXIsXG4gIGJvYXJkOiBCb2FyZCxcbiAgZmlsdGVyOiBTaW1wbGVDb29yZGluYXRlW10sXG4pOiBTaW1wbGVDb29yZGluYXRlW10ge1xuICBjb25zdCBhY2Nlc3NpYmxlOiBTaW1wbGVDb29yZGluYXRlW10gPSBbXTtcbiAgY29uc3QgbWFwOiBOb2RlW11bXSA9IGJvYXJkLm1hcE5vZGVzO1xuXG4gIGxldCBvcGVuTGlzdDogTm9kZVtdID0gW107IC8vIE9wZW4gbGlzdCBpcyB0aGUgbmV4dCBzZXQgb2YgdGlsZXMgdG8gZXZhbHVhdGVcbiAgY29uc3QgY2xvc2VkTGlzdDogTm9kZVtdID0gW107IC8vIENsb3NlZCBsaXN0IGlzIHRoZSBzZXQgb2YgdGlsZXMgYWxyZWFkeSBldmFsdWF0ZWRcblxuICBsZXQgY3VycmVudDogTm9kZSA9IG1hcFtmcm9tLnldW2Zyb20ueF07IC8vIFN0YXJ0IGF0IHRoZSBzdGFydGluZyB0aWxlXG4gIGN1cnJlbnQuZyA9IDA7XG4gIG9wZW5MaXN0LnB1c2goY3VycmVudCk7IC8vIEFkZCB0aGUgc3RhcnRpbmcgdGlsZSB0byB0aGUgb3BlbiBsaXN0XG5cbiAgd2hpbGUgKG9wZW5MaXN0Lmxlbmd0aCA+IDApIHtcbiAgICBjdXJyZW50ID0gb3Blbkxpc3RbMF07XG4gICAgLy8gTW92ZSB0aGUgY3VycmVudCB0aWxlIGZyb20gdGhlIG9wZW4gbGlzdCB0byB0aGUgY2xvc2VkIGxpc3RcbiAgICBvcGVuTGlzdC5zcGxpY2Uob3Blbkxpc3QuaW5kZXhPZihjdXJyZW50KSwgMSk7XG4gICAgY2xvc2VkTGlzdC5wdXNoKGN1cnJlbnQpO1xuICAgIGlmIChjdXJyZW50LmcgPD0gbWF4Q29zdCAmJiBmaWx0ZXI/LnNvbWUoKG90aGVyQ29vcmRpbmF0ZSkgPT4gQ29vcmRpbmF0ZS5lcXVhbHMob3RoZXJDb29yZGluYXRlLCBjdXJyZW50KSkpIHtcbiAgICAgIGFjY2Vzc2libGUucHVzaChjdXJyZW50KTtcbiAgICAgIGNoZWNrTmVpZ2hib3JzKGN1cnJlbnQsIGdldE5laWdoYm9ycyhjdXJyZW50LCBtYXApLCBvcGVuTGlzdCwgY2xvc2VkTGlzdCk7XG4gICAgfVxuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSBzdGFydGluZyB0aWxlIGZyb20gdGhlIGFjY2Vzc2libGUgdGlsZXNcbiAgcmV0dXJuIGFjY2Vzc2libGU7XG59XG4iXSwidmVyc2lvbiI6M30=