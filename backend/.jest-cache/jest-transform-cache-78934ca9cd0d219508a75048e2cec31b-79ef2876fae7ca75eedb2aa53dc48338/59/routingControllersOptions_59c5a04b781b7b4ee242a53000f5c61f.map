{"file":"C:\\Github\\Algoo\\backend\\src\\routingControllersOptions.ts","mappings":";;;;;;AAAA,qDAAkD;AAClD,6DAA0D;AAE1D,wDAAgC;AAEhC,2CAAgE;AAEnD,QAAA,yBAAyB,GAA8B;IAClE,WAAW,EAAE,SAAS;IACtB,WAAW,EAAE,CAAC,mBAAgB,CAAC;IAC/B,SAAS;IACT,kFAAkF;IAClF,qGAAqG;IACrG,WAAW,EAAE,CAAC,mBAAQ,EAAE,2BAAY,CAAC;IACrC,UAAU,EAAE;QACV,SAAS,EAAE,IAAI;KAChB;IACD,oBAAoB,EAAE,KAAK,EAAE,MAAc,EAAE,MAAa,EAAE,EAAE,CAC5D,IAAI,OAAO,CAAU,CAAC,OAAiB,EAAE,MAAgB,EAAE,EAAE;QAC3D,kBAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,GAAW,EAAE,IAAW,EAAE,EAAE;YACxD,IAAI,GAAG;gBAAE,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI;gBAAE,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;YACjC,MAAM,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;YAC3B,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC,CAAC;IACJ,kBAAkB,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;CAC5D,CAAC","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\routingControllersOptions.ts"],"sourcesContent":["import { AuthCtrl } from './controllers/AuthCtrl';\nimport { GameRoomCtrl } from './controllers/GameRoomCtrl';\nimport { User } from '@defferrard/algoo-core/src/socket';\nimport passport from 'passport';\nimport { Action, RoutingControllersOptions } from 'routing-controllers';\nimport { middleware as loggerMiddleware } from '~/utils/logger';\n\nexport const routingControllersOptions: RoutingControllersOptions = {\n  routePrefix: '/api/v1',\n  middlewares: [loggerMiddleware],\n  // NOTE :\n  // Controllers directory discovery is not working with routing-controllers-openapi\n  // TODO: Waiting for https://github.com/epiphone/routing-controllers-openapi/issues/81 to be resolved\n  controllers: [AuthCtrl, GameRoomCtrl],\n  validation: {\n    whitelist: true,\n  },\n  authorizationChecker: async (action: Action, _roles: any[]) =>\n    new Promise<boolean>((resolve: Function, reject: Function) => {\n      passport.authenticate('jwt', (err?: Error, user?: User) => {\n        if (err) return reject(err);\n        if (!user) return resolve(false);\n        action.request.user = user;\n        return resolve(true);\n      })(action.request, action.response, action.next);\n    }),\n  currentUserChecker: (action: Action) => action.request.user,\n};\n"],"version":3}