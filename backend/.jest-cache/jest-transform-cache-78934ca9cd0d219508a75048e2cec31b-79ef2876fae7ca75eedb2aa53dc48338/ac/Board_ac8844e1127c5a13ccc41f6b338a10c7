c758d5e92395921ca7fb2edebdca69df
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const exceptions_1 = require("../exceptions/");
const pathfinding_1 = require("../pathfinding");
const _1 = require("./");
/**
 * A board is a 2D array of tiles. It is used to represent the game map. It also contains interactions with the tiles.
 */
class Board {
    _tiles;
    _entities = {};
    /**
     * Create a new Board from a 2D array of TileTypes.
     * @param tiles 2D array of TileTypes.
     */
    constructor(tiles) {
        // TODO : We can filter walls from _tiles array
        this._tiles = tiles.map((row, y) => row.map((type, x) => new _1.Tile({ x, y }, type)));
    }
    /**
     * Map the board into a 2D array of Nodes.
     */
    get mapNodes() {
        return this._tiles.map((row, y) => row.map((tile, x) => new pathfinding_1.Node({ x, y }, tile.movementCost)));
    }
    /**
     * Get the minimal movement cost of all tiles on the board, ignoring negative values.
     */
    get minimalMovementCost() {
        return this._tiles.reduce((min, row) => Math.min(min, ...row.map((tile) => tile.movementCost).filter((cost) => cost > 0)), Infinity);
    }
    /**
     * Get the tile at the given coordinate object.
     * @param coordinate 2D Coordinate object.
     */
    getTile(coordinate) {
        if (!this.isValidCoordinate(coordinate))
            throw new exceptions_1.OutOfBoundsException(coordinate);
        return this._tiles[coordinate.y][coordinate.x];
    }
    /**
     * Add an entity to the board at the given XY coordinate.
     * @param entity
     * @param x X axis coordinate.
     * @param y Y axis coordinate.
     */
    pushEntity(entity, coordinate) {
        if (!this.isValidCoordinate(coordinate))
            throw new exceptions_1.OutOfBoundsException(coordinate);
        if (this._entities[entity.uuid])
            throw new exceptions_1.EntityAlreadyExistsException(entity, coordinate);
        if (this.getTile(coordinate).entity)
            throw new exceptions_1.TileUnavailableException(coordinate);
        this._entities[entity.uuid] = new _1.Coordinate(coordinate);
        this.getTile(coordinate).entity = entity;
    }
    moveEntity(entity, coordinate) {
        if (!this.isValidCoordinate(coordinate))
            throw new exceptions_1.OutOfBoundsException(coordinate);
        if (!this._entities[entity.uuid])
            throw new exceptions_1.EntityNotExistsException(entity);
        if (this.getTile(coordinate).movementCost < 0)
            throw new exceptions_1.TileUnavailableException(coordinate);
        this.getTile(this.getEntityCoordinate(entity)).entity = undefined;
        this._entities[entity.uuid] = coordinate;
        this.getTile(coordinate).entity = entity;
    }
    deleteEntity(entity) {
        if (!this._entities[entity.uuid])
            throw new exceptions_1.EntityNotExistsException(entity);
        this.getTile(this._entities[entity.uuid]).entity = undefined;
        delete this._entities[entity.uuid];
    }
    getEntityCoordinate(entity) {
        if (!this._entities[entity.uuid])
            throw new exceptions_1.EntityNotExistsException(entity);
        return this._entities[entity.uuid];
    }
    /**
     * Get the sum movement cost of the given path.
     * @param path Path to get the cost of.
     */
    getPathCost(path) {
        return path
            .map((coordinate) => this.getTile(coordinate).movementCost)
            .reduce((accumulator, cost) => accumulator + cost, 0);
    }
    isValidCoordinate(coordinate) {
        return coordinate.x >= 0 && coordinate.x < this.width && coordinate.y >= 0 && coordinate.y < this.height;
    }
    get width() {
        return this._tiles[0].length;
    }
    get height() {
        return this._tiles.length;
    }
}
exports.default = Board;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,