{"file":"C:\\Github\\Algoo\\core\\src\\pathfinding\\visible.ts","mappings":"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","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\pathfinding\\visible.ts"],"sourcesContent":["import { Board, Coordinate, SimpleCoordinate, TileType } from '../board/';\n\nexport function getVisibles(points: SimpleCoordinate[], board: Board): SimpleCoordinate[] {\n  const visibles = [...points];\n\n  // TODO : Can we do better than this?\n  // TODO : We can see through corners...\n  // TODO : Idea 1 : Bresenham\n  // TODO : Idea 2 : https://francescocossu.medium.com/creating-a-line-of-sight-map-c63e44973c6f\n  // TODO : Idea 3 :\n  // We could probably do it by using openList ? (See pathfinding...)\n\n  const extremes: SimpleCoordinate[] = [\n    ...Array.from({ length: board.height }, (_, i) => {\n      return { x: 0, y: i };\n    }),\n    ...Array.from({ length: board.width }, (_, i) => {\n      return { x: i, y: 0 };\n    }),\n    ...Array.from({ length: board.height }, (_, i) => {\n      return { x: board.width - 1, y: i };\n    }),\n    ...Array.from({ length: board.width }, (_, i) => {\n      return { x: i, y: board.height - 1 };\n    }),\n  ];\n\n  const half: SimpleCoordinate = { x: 0.5, y: 0.5 };\n\n  for (let from of points) {\n    from = Coordinate.plus(from, half);\n\n    for (let to of extremes) {\n      const direction = new Coordinate(to).plus(half).minus(from).normalized();\n      let current = from;\n      let lastCurrent = from;\n      let i: number = 0;\n      while (!Coordinate.equals(current, to)) {\n        i += 0.5;\n        current = Coordinate.plusDirection(from, direction, i);\n        current = Coordinate.floored(current);\n        if (Coordinate.equals(current, lastCurrent)) {\n          continue;\n        }\n        if (current.x < 0 || current.x >= board.width || current.y < 0 || current.y >= board.height) {\n          current = to;\n        }\n\n        if (board.getTile(current).type === TileType.Wall) {\n          break;\n        } else if (!visibles.some((v) => Coordinate.equals(v, current))) {\n          visibles.push(current);\n        }\n      }\n    }\n  }\n\n  return visibles;\n}\n"],"version":3}