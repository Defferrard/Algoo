338f783734f276c7aa10010f64e2bd05
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVisibles = getVisibles;
const board_1 = require("../board/");
function getVisibles(points, board) {
    const visibles = [...points];
    // TODO : Can we do better than this?
    // TODO : We can see through corners...
    // TODO : Idea 1 : Bresenham
    // TODO : Idea 2 : https://francescocossu.medium.com/creating-a-line-of-sight-map-c63e44973c6f
    // TODO : Idea 3 :
    // We could probably do it by using openList ? (See pathfinding...)
    const extremes = [
        ...Array.from({ length: board.height }, (_, i) => {
            return { x: 0, y: i };
        }),
        ...Array.from({ length: board.width }, (_, i) => {
            return { x: i, y: 0 };
        }),
        ...Array.from({ length: board.height }, (_, i) => {
            return { x: board.width - 1, y: i };
        }),
        ...Array.from({ length: board.width }, (_, i) => {
            return { x: i, y: board.height - 1 };
        }),
    ];
    const half = { x: 0.5, y: 0.5 };
    for (let from of points) {
        from = board_1.Coordinate.plus(from, half);
        for (let to of extremes) {
            const direction = new board_1.Coordinate(to).plus(half).minus(from).normalized();
            let current = from;
            let lastCurrent = from;
            let i = 0;
            while (!board_1.Coordinate.equals(current, to)) {
                i += 0.5;
                current = board_1.Coordinate.plusDirection(from, direction, i);
                current = board_1.Coordinate.floored(current);
                if (board_1.Coordinate.equals(current, lastCurrent)) {
                    continue;
                }
                if (current.x < 0 || current.x >= board.width || current.y < 0 || current.y >= board.height) {
                    current = to;
                }
                if (board.getTile(current).type === board_1.TileType.Wall) {
                    break;
                }
                else if (!visibles.some((v) => board_1.Coordinate.equals(v, current))) {
                    visibles.push(current);
                }
            }
        }
    }
    return visibles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xccGF0aGZpbmRpbmdcXHZpc2libGUudHMiLCJtYXBwaW5ncyI6Ijs7QUFFQSxrQ0F3REM7QUExREQscUNBQTBFO0FBRTFFLFNBQWdCLFdBQVcsQ0FBQyxNQUEwQixFQUFFLEtBQVk7SUFDbEUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0lBRTdCLHFDQUFxQztJQUNyQyx1Q0FBdUM7SUFDdkMsNEJBQTRCO0lBQzVCLDhGQUE4RjtJQUM5RixrQkFBa0I7SUFDbEIsbUVBQW1FO0lBRW5FLE1BQU0sUUFBUSxHQUF1QjtRQUNuQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUM7UUFDRixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN4QixDQUFDLENBQUM7UUFDRixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9DLE9BQU8sRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3RDLENBQUMsQ0FBQztRQUNGLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFDO0tBQ0gsQ0FBQztJQUVGLE1BQU0sSUFBSSxHQUFxQixFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBRWxELEtBQUssSUFBSSxJQUFJLElBQUksTUFBTSxFQUFFLENBQUM7UUFDeEIsSUFBSSxHQUFHLGtCQUFVLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVuQyxLQUFLLElBQUksRUFBRSxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLE1BQU0sU0FBUyxHQUFHLElBQUksa0JBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3pFLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxrQkFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDdkMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztnQkFDVCxPQUFPLEdBQUcsa0JBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDdkQsT0FBTyxHQUFHLGtCQUFVLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QyxJQUFJLGtCQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDO29CQUM1QyxTQUFTO2dCQUNYLENBQUM7Z0JBQ0QsSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7b0JBQzVGLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ2YsQ0FBQztnQkFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxLQUFLLGdCQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2xELE1BQU07Z0JBQ1IsQ0FBQztxQkFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDaEUsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDekIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xccGF0aGZpbmRpbmdcXHZpc2libGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm9hcmQsIENvb3JkaW5hdGUsIFNpbXBsZUNvb3JkaW5hdGUsIFRpbGVUeXBlIH0gZnJvbSAnLi4vYm9hcmQvJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpc2libGVzKHBvaW50czogU2ltcGxlQ29vcmRpbmF0ZVtdLCBib2FyZDogQm9hcmQpOiBTaW1wbGVDb29yZGluYXRlW10ge1xuICBjb25zdCB2aXNpYmxlcyA9IFsuLi5wb2ludHNdO1xuXG4gIC8vIFRPRE8gOiBDYW4gd2UgZG8gYmV0dGVyIHRoYW4gdGhpcz9cbiAgLy8gVE9ETyA6IFdlIGNhbiBzZWUgdGhyb3VnaCBjb3JuZXJzLi4uXG4gIC8vIFRPRE8gOiBJZGVhIDEgOiBCcmVzZW5oYW1cbiAgLy8gVE9ETyA6IElkZWEgMiA6IGh0dHBzOi8vZnJhbmNlc2NvY29zc3UubWVkaXVtLmNvbS9jcmVhdGluZy1hLWxpbmUtb2Ytc2lnaHQtbWFwLWM2M2U0NDk3M2M2ZlxuICAvLyBUT0RPIDogSWRlYSAzIDpcbiAgLy8gV2UgY291bGQgcHJvYmFibHkgZG8gaXQgYnkgdXNpbmcgb3Blbkxpc3QgPyAoU2VlIHBhdGhmaW5kaW5nLi4uKVxuXG4gIGNvbnN0IGV4dHJlbWVzOiBTaW1wbGVDb29yZGluYXRlW10gPSBbXG4gICAgLi4uQXJyYXkuZnJvbSh7IGxlbmd0aDogYm9hcmQuaGVpZ2h0IH0sIChfLCBpKSA9PiB7XG4gICAgICByZXR1cm4geyB4OiAwLCB5OiBpIH07XG4gICAgfSksXG4gICAgLi4uQXJyYXkuZnJvbSh7IGxlbmd0aDogYm9hcmQud2lkdGggfSwgKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiB7IHg6IGksIHk6IDAgfTtcbiAgICB9KSxcbiAgICAuLi5BcnJheS5mcm9tKHsgbGVuZ3RoOiBib2FyZC5oZWlnaHQgfSwgKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiB7IHg6IGJvYXJkLndpZHRoIC0gMSwgeTogaSB9O1xuICAgIH0pLFxuICAgIC4uLkFycmF5LmZyb20oeyBsZW5ndGg6IGJvYXJkLndpZHRoIH0sIChfLCBpKSA9PiB7XG4gICAgICByZXR1cm4geyB4OiBpLCB5OiBib2FyZC5oZWlnaHQgLSAxIH07XG4gICAgfSksXG4gIF07XG5cbiAgY29uc3QgaGFsZjogU2ltcGxlQ29vcmRpbmF0ZSA9IHsgeDogMC41LCB5OiAwLjUgfTtcblxuICBmb3IgKGxldCBmcm9tIG9mIHBvaW50cykge1xuICAgIGZyb20gPSBDb29yZGluYXRlLnBsdXMoZnJvbSwgaGFsZik7XG5cbiAgICBmb3IgKGxldCB0byBvZiBleHRyZW1lcykge1xuICAgICAgY29uc3QgZGlyZWN0aW9uID0gbmV3IENvb3JkaW5hdGUodG8pLnBsdXMoaGFsZikubWludXMoZnJvbSkubm9ybWFsaXplZCgpO1xuICAgICAgbGV0IGN1cnJlbnQgPSBmcm9tO1xuICAgICAgbGV0IGxhc3RDdXJyZW50ID0gZnJvbTtcbiAgICAgIGxldCBpOiBudW1iZXIgPSAwO1xuICAgICAgd2hpbGUgKCFDb29yZGluYXRlLmVxdWFscyhjdXJyZW50LCB0bykpIHtcbiAgICAgICAgaSArPSAwLjU7XG4gICAgICAgIGN1cnJlbnQgPSBDb29yZGluYXRlLnBsdXNEaXJlY3Rpb24oZnJvbSwgZGlyZWN0aW9uLCBpKTtcbiAgICAgICAgY3VycmVudCA9IENvb3JkaW5hdGUuZmxvb3JlZChjdXJyZW50KTtcbiAgICAgICAgaWYgKENvb3JkaW5hdGUuZXF1YWxzKGN1cnJlbnQsIGxhc3RDdXJyZW50KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50LnggPCAwIHx8IGN1cnJlbnQueCA+PSBib2FyZC53aWR0aCB8fCBjdXJyZW50LnkgPCAwIHx8IGN1cnJlbnQueSA+PSBib2FyZC5oZWlnaHQpIHtcbiAgICAgICAgICBjdXJyZW50ID0gdG87XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9hcmQuZ2V0VGlsZShjdXJyZW50KS50eXBlID09PSBUaWxlVHlwZS5XYWxsKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAoIXZpc2libGVzLnNvbWUoKHYpID0+IENvb3JkaW5hdGUuZXF1YWxzKHYsIGN1cnJlbnQpKSkge1xuICAgICAgICAgIHZpc2libGVzLnB1c2goY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmlzaWJsZXM7XG59XG4iXSwidmVyc2lvbiI6M30=