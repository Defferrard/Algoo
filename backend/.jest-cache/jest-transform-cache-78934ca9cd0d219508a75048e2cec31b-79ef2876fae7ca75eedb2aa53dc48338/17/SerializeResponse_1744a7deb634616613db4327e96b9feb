5b4ecfa9abbfbf4c7371f295173bcae7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializeResponse = SerializeResponse;
const assertions_1 = require("@defferrard/algoo-core/src/utils/assertions");
const class_transformer_validator_1 = require("class-transformer-validator");
const routing_controllers_openapi_1 = require("routing-controllers-openapi");
function SerializeResponse(ResPayloadDto) {
    return function (target, methodName, descriptor) {
        const originalMethod = descriptor.value;
        (0, assertions_1.assertNonNull)(originalMethod);
        // Apply the ResponseSchema decorator
        (0, routing_controllers_openapi_1.ResponseSchema)(ResPayloadDto)(target, methodName, descriptor);
        descriptor.value = async function (...args) {
            const resPayload = await originalMethod.apply(this, args);
            try {
                let result;
                if (Array.isArray(resPayload)) {
                    result = (await Promise.all(resPayload.map((payload) => (0, class_transformer_validator_1.transformAndValidate)(ResPayloadDto, payload))));
                }
                else {
                    result = (await (0, class_transformer_validator_1.transformAndValidate)(ResPayloadDto, resPayload));
                }
                return result;
            }
            catch (e) {
                console.error(`Failed to serialize the response from ${target.constructor.name}#${methodName}`);
                throw e;
            }
        };
        Object.defineProperty(descriptor.value, 'name', { value: methodName });
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGJhY2tlbmRcXHNyY1xcdXRpbHNcXFNlcmlhbGl6ZVJlc3BvbnNlLnRzIiwibWFwcGluZ3MiOiI7O0FBTUEsOENBZ0NDO0FBcENELDRFQUE0RTtBQUM1RSw2RUFBOEU7QUFDOUUsNkVBQTZEO0FBRTdELFNBQWdCLGlCQUFpQixDQUFnQixhQUEyQjtJQUMxRSxPQUFPLFVBQ0wsTUFBVyxFQUNYLFVBQWtCLEVBQ2xCLFVBQXVFO1FBRXZFLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDeEMsSUFBQSwwQkFBYSxFQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRTlCLHFDQUFxQztRQUNyQyxJQUFBLDRDQUFjLEVBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUU5RCxVQUFVLENBQUMsS0FBSyxHQUFHLEtBQUssV0FBVyxHQUFHLElBQVU7WUFDOUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUM7Z0JBQ0gsSUFBSSxNQUFjLENBQUM7Z0JBQ25CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO29CQUM5QixNQUFNLEdBQUcsQ0FBQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ3pCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUEsa0RBQW9CLEVBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzFFLENBQXNCLENBQUM7Z0JBQzFCLENBQUM7cUJBQU0sQ0FBQztvQkFDTixNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUEsa0RBQW9CLEVBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFzQixDQUFDO2dCQUN4RixDQUFDO2dCQUNELE9BQU8sTUFBTSxDQUFDO1lBQ2hCLENBQUM7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMseUNBQXlDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLFVBQVUsRUFBRSxDQUFDLENBQUM7Z0JBQ2hHLE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQztRQUNILENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxHaXRodWJcXEFsZ29vXFxiYWNrZW5kXFxzcmNcXHV0aWxzXFxTZXJpYWxpemVSZXNwb25zZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEVE8gfSBmcm9tICdAZGVmZmVycmFyZC9hbGdvby1jb3JlL3NyYy9kdG8nO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0BkZWZmZXJyYXJkL2FsZ29vLWNvcmUvc3JjL3V0aWxzL1R5cGUnO1xuaW1wb3J0IHsgYXNzZXJ0Tm9uTnVsbCB9IGZyb20gJ0BkZWZmZXJyYXJkL2FsZ29vLWNvcmUvc3JjL3V0aWxzL2Fzc2VydGlvbnMnO1xuaW1wb3J0IHsgQ2xhc3NUeXBlLCB0cmFuc2Zvcm1BbmRWYWxpZGF0ZSB9IGZyb20gJ2NsYXNzLXRyYW5zZm9ybWVyLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBSZXNwb25zZVNjaGVtYSB9IGZyb20gJ3JvdXRpbmctY29udHJvbGxlcnMtb3BlbmFwaSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXJpYWxpemVSZXNwb25zZTxEIGV4dGVuZHMgRFRPPihSZXNQYXlsb2FkRHRvOiBDbGFzc1R5cGU8RD4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIDxBUkdTIGV4dGVuZHMgdW5rbm93bltdLCBSRVRVUk4gZXh0ZW5kcyBUeXBlPEQ+IHwgVHlwZTxEPltdPihcbiAgICB0YXJnZXQ6IGFueSxcbiAgICBtZXRob2ROYW1lOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8KC4uLmFyZ3M6IEFSR1MpID0+IFByb21pc2U8UkVUVVJOPj4sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICBhc3NlcnROb25OdWxsKG9yaWdpbmFsTWV0aG9kKTtcblxuICAgIC8vIEFwcGx5IHRoZSBSZXNwb25zZVNjaGVtYSBkZWNvcmF0b3JcbiAgICBSZXNwb25zZVNjaGVtYShSZXNQYXlsb2FkRHRvKSh0YXJnZXQsIG1ldGhvZE5hbWUsIGRlc2NyaXB0b3IpO1xuXG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IGFzeW5jIGZ1bmN0aW9uICguLi5hcmdzOiBBUkdTKSB7XG4gICAgICBjb25zdCByZXNQYXlsb2FkID0gYXdhaXQgb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgcmVzdWx0OiBSRVRVUk47XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc1BheWxvYWQpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgICAgICAgcmVzUGF5bG9hZC5tYXAoKHBheWxvYWQpID0+IHRyYW5zZm9ybUFuZFZhbGlkYXRlKFJlc1BheWxvYWREdG8sIHBheWxvYWQpKSxcbiAgICAgICAgICApKSBhcyB1bmtub3duIGFzIFJFVFVSTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSAoYXdhaXQgdHJhbnNmb3JtQW5kVmFsaWRhdGUoUmVzUGF5bG9hZER0bywgcmVzUGF5bG9hZCkpIGFzIHVua25vd24gYXMgUkVUVVJOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBzZXJpYWxpemUgdGhlIHJlc3BvbnNlIGZyb20gJHt0YXJnZXQuY29uc3RydWN0b3IubmFtZX0jJHttZXRob2ROYW1lfWApO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGVzY3JpcHRvci52YWx1ZSwgJ25hbWUnLCB7IHZhbHVlOiBtZXRob2ROYW1lIH0pO1xuICB9O1xufVxuIl0sInZlcnNpb24iOjN9