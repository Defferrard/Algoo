{"file":"C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\GameRoomCtrl.ts","mappings":";;;;;;;;;;;;;;;;;;AAAA,wDAAmF;AACnF,8DAAsE;AACtE,4EAA4E;AAC5E,qDAAyC;AAEzC,2DAW4B;AAC5B,yCAAmC;AACnC,mCAAiC;AACjC,iFAAyD;AACzD,2CAAwC;AAExC,MAAM,cAAc,GAAG,cAAc,CAAC;AAI/B,IAAM,YAAY,GAAlB,MAAM,YAAY;IACJ;IAAnB,YAAmB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;IAAG,CAAC;IAI/C,UAAU,CAAoB,MAAc,EAAmB,GAAY,EAA4B,IAAY;QACjH,IAAI,CAAC,IAAA,wBAAM,EAAC,IAAI,CAAC,EAAE,CAAC;YAClB,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;QAC7B,CAAC;QACD,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,YAAY,CAAC,CAAC;QAC7C,IAAA,0BAAa,EAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,IAAI,GAAS,GAAG,CAAC,IAAY,CAAC;QACpC,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAGD,WAAW,CAAoB,MAAc;QAC3C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC/B,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,eAAe,CAAC,CAAC;IAClD,CAAC;IAGK,AAAN,KAAK,CAAC,SAAS,CAAoB,MAAc,EAAiB,GAAmB;QACnF,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,iBAAiB,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/D,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC9C,CAAC;IAGD,OAAO,CAAoB,MAAc,EAAiB,GAAsB;QAC9E,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,cAAc,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;CACF,CAAA;AAhCY,oCAAY;AAKvB;IAFC,IAAA,8BAAS,GAAE;IACX,IAAA,kCAAa,EAAC,oBAAW,CAAC,aAAa,CAAC;IAC7B,WAAA,IAAA,oCAAe,GAAE,CAAA;IAAkB,WAAA,IAAA,kCAAa,GAAE,CAAA;IAAgB,WAAA,IAAA,6BAAQ,EAAC,cAAc,CAAC,CAAA;;qCAAhE,kBAAM;;8CAQ3C;AAGD;IADC,IAAA,iCAAY,GAAE;IACF,WAAA,IAAA,oCAAe,GAAE,CAAA;;qCAAS,kBAAM;;+CAG5C;AAGK;IADL,IAAA,8BAAS,EAAC,oBAAW,CAAC,iBAAiB,CAAC;IACxB,WAAA,IAAA,oCAAe,GAAE,CAAA;IAAkB,WAAA,IAAA,gCAAW,GAAE,CAAA;;qCAAtB,kBAAM,EAAsB,oBAAc;;6CAGpF;AAGD;IADC,IAAA,8BAAS,EAAC,oBAAW,CAAC,eAAe,CAAC;IAC9B,WAAA,IAAA,oCAAe,GAAE,CAAA;IAAkB,WAAA,IAAA,gCAAW,GAAE,CAAA;;qCAAtB,kBAAM;;2CAGxC;uBA/BU,YAAY;IAFxB,IAAA,gBAAO,GAAE;IACT,IAAA,qCAAgB,EAAC,WAAW,cAAc,EAAE,CAAC;qCAEhB,yBAAe;GADhC,YAAY,CAgCxB","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\GameRoomCtrl.ts"],"sourcesContent":["import { ChatMessageDTO, IsReadyMessageDTO } from '@defferrard/algoo-core/src/dto';\nimport { MessageType, User } from '@defferrard/algoo-core/src/socket';\nimport { assertNonNull } from '@defferrard/algoo-core/src/utils/assertions';\nimport { isUUID } from 'class-validator';\nimport { Request } from 'express';\nimport {\n  ConnectedSocket,\n  EmitOnSuccess,\n  MessageBody,\n  NspParam,\n  NspParams,\n  OnConnect,\n  OnDisconnect,\n  OnMessage,\n  SocketController,\n  SocketRequest,\n} from 'socket-controllers';\nimport { Socket } from 'socket.io';\nimport { Service } from 'typedi';\nimport GameRoomService from '~/services/GameRoomService';\nimport { LOGGER } from '~/utils/logger';\n\nconst GAME_ROOM_UUID = 'gameRoomUUID';\n\n@Service()\n@SocketController(`/rooms/:${GAME_ROOM_UUID}`)\nexport class GameRoomCtrl {\n  constructor(public service: GameRoomService) {}\n\n  @OnConnect()\n  @EmitOnSuccess(MessageType.PUT_GAME_ROOM)\n  onJoinRoom(@ConnectedSocket() socket: Socket, @SocketRequest() req: Request, @NspParam(GAME_ROOM_UUID) room: string) {\n    if (!isUUID(room)) {\n      return socket.disconnect();\n    }\n    LOGGER.info(`Socket ${socket.id} connected`);\n    assertNonNull(req.user);\n    const user: User = req.user as User;\n    return this.service.joinRoom(socket, user, room);\n  }\n\n  @OnDisconnect()\n  onLeaveRoom(@ConnectedSocket() socket: Socket) {\n    this.service.leaveRoom(socket);\n    LOGGER.info(`Socket ${socket.id} disconnected`);\n  }\n\n  @OnMessage(MessageType.GAME_ROOM_MESSAGE)\n  async onMessage(@ConnectedSocket() socket: Socket, @MessageBody() dto: ChatMessageDTO) {\n    LOGGER.info(`Socket ${socket.id} sent message ${dto.message}`);\n    await this.service.sendMessage(socket, dto);\n  }\n\n  @OnMessage(MessageType.GAME_ROOM_READY)\n  onReady(@ConnectedSocket() socket: Socket, @MessageBody() dto: IsReadyMessageDTO) {\n    LOGGER.info(`Socket ${socket.id} is ready: ${dto.isReady}`);\n    this.service.isReady(socket, dto.isReady);\n  }\n}\n"],"version":3}