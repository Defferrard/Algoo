8b0e734b802b1b9813c0f0c23116411f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notUndefined = notUndefined;
exports.notNull = notNull;
exports.assertNonNull = assertNonNull;
/**
 * Throw an error if the object is undefined. Otherwise, return the object in a not-undefined type.
 * @param object Object to check
 * @param error Error to throw if the object is undefined
 * @returns Object in a not-undefined type
 */
function notUndefined(object, error) {
    if (object === undefined) {
        throw error || new Error('Given object is undefined.');
    }
    return object;
}
/**
 * Throw an error if the object is null. Otherwise, return the object in a not-null type.
 * @param object Object to check
 * @param error Error to throw if the object is null
 * @returns Object in a not-null type
 */
function notNull(object, error) {
    if (object === undefined || object === null) {
        throw error || new Error('Given object is null or undefined.');
    }
    return object;
}
/**
 * Throw an error if the object is either undefined or null.
 * @param object Object to check
 * @param error Error class to throw if the object is undefined or null
 * @param args Arguments to pass to the error class constructor
 */
function assertNonNull(object, error, ...args) {
    if (object === undefined || object === null) {
        throw error ? new error(...args) : new Error('Given object is null or undefined.');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xcdXRpbHNcXGFzc2VydGlvbnMudHMiLCJtYXBwaW5ncyI6Ijs7QUFNQSxvQ0FLQztBQVFELDBCQUtDO0FBUUQsc0NBUUM7QUF4Q0Q7Ozs7O0dBS0c7QUFDSCxTQUFnQixZQUFZLENBQUksTUFBcUIsRUFBRSxLQUFhO0lBQ2xFLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sS0FBSyxJQUFJLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLE9BQU8sQ0FBSSxNQUFnQixFQUFFLEtBQWE7SUFDeEQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUM1QyxNQUFNLEtBQUssSUFBSSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixhQUFhLENBQzNCLE1BQWdCLEVBQ2hCLEtBQWtDLEVBQ2xDLEdBQUcsSUFBVTtJQUViLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDNUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFDckYsQ0FBQztBQUNILENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xcdXRpbHNcXGFzc2VydGlvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaHJvdyBhbiBlcnJvciBpZiB0aGUgb2JqZWN0IGlzIHVuZGVmaW5lZC4gT3RoZXJ3aXNlLCByZXR1cm4gdGhlIG9iamVjdCBpbiBhIG5vdC11bmRlZmluZWQgdHlwZS5cbiAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0gZXJyb3IgRXJyb3IgdG8gdGhyb3cgaWYgdGhlIG9iamVjdCBpcyB1bmRlZmluZWRcbiAqIEByZXR1cm5zIE9iamVjdCBpbiBhIG5vdC11bmRlZmluZWQgdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbm90VW5kZWZpbmVkPFQ+KG9iamVjdDogVCB8IHVuZGVmaW5lZCwgZXJyb3I/OiBFcnJvcik6IFQge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBlcnJvciB8fCBuZXcgRXJyb3IoJ0dpdmVuIG9iamVjdCBpcyB1bmRlZmluZWQuJyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBUaHJvdyBhbiBlcnJvciBpZiB0aGUgb2JqZWN0IGlzIG51bGwuIE90aGVyd2lzZSwgcmV0dXJuIHRoZSBvYmplY3QgaW4gYSBub3QtbnVsbCB0eXBlLlxuICogQHBhcmFtIG9iamVjdCBPYmplY3QgdG8gY2hlY2tcbiAqIEBwYXJhbSBlcnJvciBFcnJvciB0byB0aHJvdyBpZiB0aGUgb2JqZWN0IGlzIG51bGxcbiAqIEByZXR1cm5zIE9iamVjdCBpbiBhIG5vdC1udWxsIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vdE51bGw8VD4ob2JqZWN0OiBUIHwgbnVsbCwgZXJyb3I/OiBFcnJvcik6IFQge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQgfHwgb2JqZWN0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgZXJyb3IgfHwgbmV3IEVycm9yKCdHaXZlbiBvYmplY3QgaXMgbnVsbCBvciB1bmRlZmluZWQuJyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyoqXG4gKiBUaHJvdyBhbiBlcnJvciBpZiB0aGUgb2JqZWN0IGlzIGVpdGhlciB1bmRlZmluZWQgb3IgbnVsbC5cbiAqIEBwYXJhbSBvYmplY3QgT2JqZWN0IHRvIGNoZWNrXG4gKiBAcGFyYW0gZXJyb3IgRXJyb3IgY2xhc3MgdG8gdGhyb3cgaWYgdGhlIG9iamVjdCBpcyB1bmRlZmluZWQgb3IgbnVsbFxuICogQHBhcmFtIGFyZ3MgQXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGVycm9yIGNsYXNzIGNvbnN0cnVjdG9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROb25OdWxsPFQsIEVyciBleHRlbmRzIEVycm9yLCBBcmdzIGV4dGVuZHMgdW5rbm93bltdPihcbiAgb2JqZWN0OiBUIHwgbnVsbCxcbiAgZXJyb3I/OiBuZXcgKC4uLmFyZ3M6IEFyZ3MpID0+IEVycixcbiAgLi4uYXJnczogQXJnc1xuKTogYXNzZXJ0cyBvYmplY3QgaXMgTm9uTnVsbGFibGU8VD4ge1xuICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQgfHwgb2JqZWN0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgZXJyb3IgPyBuZXcgZXJyb3IoLi4uYXJncykgOiBuZXcgRXJyb3IoJ0dpdmVuIG9iamVjdCBpcyBudWxsIG9yIHVuZGVmaW5lZC4nKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9