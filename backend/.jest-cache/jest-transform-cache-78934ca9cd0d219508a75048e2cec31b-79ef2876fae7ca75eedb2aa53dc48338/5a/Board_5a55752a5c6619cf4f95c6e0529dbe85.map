{"file":"C:\\Github\\Algoo\\core\\src\\board\\Board.ts","mappings":"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","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\board\\Board.ts"],"sourcesContent":["import {\n  EntityAlreadyExistsException,\n  EntityNotExistsException,\n  OutOfBoundsException,\n  TileUnavailableException,\n} from '../exceptions/';\nimport type { Resources } from '../game/';\nimport { Node } from '../pathfinding';\nimport type { Entity, SimpleCoordinate, TileType } from './';\nimport { Coordinate, Tile } from './';\n\n/**\n * A board is a 2D array of tiles. It is used to represent the game map. It also contains interactions with the tiles.\n */\nexport default class Board {\n  private readonly _tiles: Tile[][];\n  private readonly _entities: { [key in string]: SimpleCoordinate } = {};\n\n  /**\n   * Create a new Board from a 2D array of TileTypes.\n   * @param tiles 2D array of TileTypes.\n   */\n  constructor(tiles: TileType[][]) {\n    // TODO : We can filter walls from _tiles array\n\n    this._tiles = tiles.map((row: TileType[], y: number) =>\n      row.map((type: TileType, x: number) => new Tile({ x, y }, type)),\n    );\n  }\n\n  /**\n   * Map the board into a 2D array of Nodes.\n   */\n  get mapNodes(): Node[][] {\n    return this._tiles.map((row: Tile[], y: number) =>\n      row.map((tile: Tile, x: number) => new Node({ x, y }, tile.movementCost)),\n    );\n  }\n\n  /**\n   * Get the minimal movement cost of all tiles on the board, ignoring negative values.\n   */\n  get minimalMovementCost(): number {\n    return this._tiles.reduce(\n      (min: number, row: Tile[]) => Math.min(min, ...row.map((tile) => tile.movementCost).filter((cost) => cost > 0)),\n      Infinity,\n    );\n  }\n\n  /**\n   * Get the tile at the given coordinate object.\n   * @param coordinate 2D Coordinate object.\n   */\n  getTile(coordinate: SimpleCoordinate): Tile {\n    if (!this.isValidCoordinate(coordinate)) throw new OutOfBoundsException(coordinate);\n    return this._tiles[coordinate.y][coordinate.x];\n  }\n\n  /**\n   * Add an entity to the board at the given XY coordinate.\n   * @param entity\n   * @param x X axis coordinate.\n   * @param y Y axis coordinate.\n   */\n  pushEntity(entity: Entity<Resources>, coordinate: SimpleCoordinate): void {\n    if (!this.isValidCoordinate(coordinate)) throw new OutOfBoundsException(coordinate);\n    if (this._entities[entity.uuid]) throw new EntityAlreadyExistsException(entity, coordinate);\n    if (this.getTile(coordinate).entity) throw new TileUnavailableException(coordinate);\n\n    this._entities[entity.uuid] = new Coordinate(coordinate);\n    this.getTile(coordinate).entity = entity;\n  }\n\n  moveEntity(entity: Entity<Resources>, coordinate: SimpleCoordinate): void {\n    if (!this.isValidCoordinate(coordinate)) throw new OutOfBoundsException(coordinate);\n    if (!this._entities[entity.uuid]) throw new EntityNotExistsException(entity);\n    if (this.getTile(coordinate).movementCost < 0) throw new TileUnavailableException(coordinate);\n\n    this.getTile(this.getEntityCoordinate(entity)).entity = undefined;\n    this._entities[entity.uuid] = coordinate;\n    this.getTile(coordinate).entity = entity;\n  }\n\n  deleteEntity(entity: Entity<Resources>): void {\n    if (!this._entities[entity.uuid]) throw new EntityNotExistsException(entity);\n\n    this.getTile(this._entities[entity.uuid]).entity = undefined;\n    delete this._entities[entity.uuid];\n  }\n\n  getEntityCoordinate(entity: Entity<Resources>): SimpleCoordinate {\n    if (!this._entities[entity.uuid]) throw new EntityNotExistsException(entity);\n    return this._entities[entity.uuid];\n  }\n\n  /**\n   * Get the sum movement cost of the given path.\n   * @param path Path to get the cost of.\n   */\n  getPathCost(path: SimpleCoordinate[]): number {\n    return path\n      .map((coordinate) => this.getTile(coordinate)!.movementCost)\n      .reduce((accumulator: number, cost: number) => accumulator + cost, 0);\n  }\n\n  isValidCoordinate(coordinate: SimpleCoordinate | { x: number; y: number }): boolean {\n    return coordinate.x >= 0 && coordinate.x < this.width && coordinate.y >= 0 && coordinate.y < this.height;\n  }\n\n  get width(): number {\n    return this._tiles[0].length;\n  }\n\n  get height(): number {\n    return this._tiles.length;\n  }\n}\n"],"version":3}