{"file":"C:\\Github\\Algoo\\core\\src\\board\\Coordinate.ts","mappings":"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","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\board\\Coordinate.ts"],"sourcesContent":["import { CoordinateDTO, DTOFriendly } from '../dto';\n\nexport type BaseCoordinate = { x: number; y: number };\nexport type SimpleCoordinate = BaseCoordinate;\nexport default class Coordinate implements BaseCoordinate, DTOFriendly<CoordinateDTO> {\n  readonly x: number;\n  readonly y: number;\n\n  constructor(coordinate: SimpleCoordinate) {\n    this.x = coordinate.x;\n    this.y = coordinate.y;\n  }\n\n  toString(): string {\n    return `(${this.x};${this.y})`;\n  }\n\n  /** @deprecated use equals instead */\n  is(coordinate: SimpleCoordinate): boolean {\n    return this.x === coordinate.x && this.y === coordinate.y;\n  }\n\n  equals(coordinate: SimpleCoordinate): boolean {\n    return Coordinate.equals(this, coordinate);\n  }\n\n  static equals(a: SimpleCoordinate | undefined, b: SimpleCoordinate | undefined): boolean {\n    return !!a && !!b && a.x === b.x && a.y === b.y;\n  }\n\n  plus(coordinate: SimpleCoordinate): Coordinate {\n    return new Coordinate(Coordinate.plus(this, coordinate));\n  }\n\n  static plus(a: SimpleCoordinate, b: SimpleCoordinate): SimpleCoordinate {\n    return {\n      x: a.x + b.x,\n      y: a.y + b.y,\n    };\n  }\n\n  minus(coordinate: SimpleCoordinate): Coordinate {\n    const x: number = this.x - coordinate.x;\n    const y: number = this.y - coordinate.y;\n    return new Coordinate({ x, y });\n  }\n\n  plusDirection(direction: Coordinate, distance: number): Coordinate {\n    return new Coordinate(Coordinate.plusDirection(this, direction, distance));\n  }\n\n  static plusDirection(coordinate: SimpleCoordinate, direction: Coordinate, distance: number): SimpleCoordinate {\n    return {\n      x: coordinate.x + direction.x * distance,\n      y: coordinate.y + direction.y * distance,\n    };\n  }\n\n  normalized() {\n    if (this.getLength() === 0) {\n      return new Coordinate({ x: 0, y: 0 });\n    }\n    const x: number = this.x / this.getLength();\n    const y: number = this.y / this.getLength();\n    return new Coordinate({ x, y });\n  }\n\n  floored() {\n    return new Coordinate(Coordinate.floored(this));\n  }\n  static floored(coordinate: SimpleCoordinate): SimpleCoordinate {\n    return {\n      x: Math.floor(coordinate.x),\n      y: Math.floor(coordinate.y),\n    };\n  }\n\n  getLength(): number {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  get neighbors(): Coordinate[] {\n    return Coordinate.getNeighbors(this).map((simpleNeighbor) => new Coordinate(simpleNeighbor));\n  }\n\n  static getNeighbors(coordinate: SimpleCoordinate): SimpleCoordinate[] {\n    return [\n      { x: coordinate.x - 1, y: coordinate.y },\n      { x: coordinate.x + 1, y: coordinate.y },\n      { x: coordinate.x, y: coordinate.y - 1 },\n      { x: coordinate.x, y: coordinate.y + 1 },\n    ];\n  }\n\n  isNeighbor(coordinate: SimpleCoordinate): boolean {\n    return Coordinate.isNeighbor(this, coordinate);\n  }\n\n  static isNeighbor(a: SimpleCoordinate, b: SimpleCoordinate): boolean {\n    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) === 1;\n  }\n\n  toDTO() {\n    return Coordinate.toDTO(this);\n  }\n  static toDTO(coordinate: SimpleCoordinate) {\n    const dto = new CoordinateDTO();\n    dto.x = coordinate.x;\n    dto.y = coordinate.y;\n    return dto;\n  }\n}\n"],"version":3}