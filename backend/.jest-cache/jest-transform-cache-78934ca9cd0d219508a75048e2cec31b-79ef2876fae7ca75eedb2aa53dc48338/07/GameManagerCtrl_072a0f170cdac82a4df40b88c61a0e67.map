{"file":"C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\GameManagerCtrl.ts","mappings":";;;;;;;;;;;;;;;;;;AAAA,wDAA6E;AAC7E,8DAAgE;AAChE,2DAA+F;AAC/F,yCAAmC;AACnC,mCAAiC;AACjC,uFAA+D;AAC/D,2CAAwC;AAExC,MAAM,cAAc,GAAG,cAAc,CAAC;AAI/B,IAAM,eAAe,GAArB,MAAM,eAAe;IACP;IAAnB,YAAmB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;IAAG,CAAC;IAGlD,QAAQ,CAAoB,MAAc;QACxC,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,cAAc,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAGD,SAAS,CAAoB,MAAc,EAAiB,OAAqB;QAC/E,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAGD,UAAU,CAAoB,MAAc,EAAiB,OAAsB;QACjF,eAAM,CAAC,IAAI,CAAC,UAAU,MAAM,CAAC,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;CACF,CAAA;AApBY,0CAAe;AAI1B;IADC,IAAA,8BAAS,EAAC,oBAAW,CAAC,SAAS,CAAC;IACvB,WAAA,IAAA,oCAAe,GAAE,CAAA;;qCAAS,kBAAM;;+CAGzC;AAGD;IADC,IAAA,8BAAS,EAAC,oBAAW,CAAC,UAAU,CAAC;IACvB,WAAA,IAAA,oCAAe,GAAE,CAAA;IAAkB,WAAA,IAAA,gCAAW,GAAE,CAAA;;qCAAtB,kBAAM,EAA0B,kBAAY;;gDAGhF;AAGD;IADC,IAAA,8BAAS,EAAC,oBAAW,CAAC,WAAW,CAAC;IACvB,WAAA,IAAA,oCAAe,GAAE,CAAA;IAAkB,WAAA,IAAA,gCAAW,GAAE,CAAA;;qCAAtB,kBAAM,EAA0B,mBAAa;;iDAGlF;0BAnBU,eAAe;IAF3B,IAAA,gBAAO,GAAE;IACT,IAAA,qCAAgB,EAAC,WAAW,cAAc,EAAE,CAAC;qCAEhB,4BAAkB;GADnC,eAAe,CAoB3B","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\GameManagerCtrl.ts"],"sourcesContent":["import { CastSpellDTO, MoveEntityDTO } from '@defferrard/algoo-core/src/dto';\nimport { MessageType } from '@defferrard/algoo-core/src/socket';\nimport { ConnectedSocket, MessageBody, OnMessage, SocketController } from 'socket-controllers';\nimport { Socket } from 'socket.io';\nimport { Service } from 'typedi';\nimport GameManagerService from '~/services/GameManagerService';\nimport { LOGGER } from '~/utils/logger';\n\nconst GAME_ROOM_UUID = 'gameRoomUUID';\n\n@Service()\n@SocketController(`/rooms/:${GAME_ROOM_UUID}`)\nexport class GameManagerCtrl {\n  constructor(public service: GameManagerService) {}\n\n  @OnMessage(MessageType.NEXT_TURN)\n  nextTurn(@ConnectedSocket() socket: Socket) {\n    LOGGER.info(`Socket ${socket.id} passed turn`);\n    this.service.nextTurn(socket);\n  }\n\n  @OnMessage(MessageType.CAST_SPELL)\n  castSpell(@ConnectedSocket() socket: Socket, @MessageBody() payload: CastSpellDTO) {\n    LOGGER.info(`Socket ${socket.id} cast spell`, payload);\n    this.service.castSpell(socket, payload);\n  }\n\n  @OnMessage(MessageType.MOVE_ENTITY)\n  moveEntity(@ConnectedSocket() socket: Socket, @MessageBody() payload: MoveEntityDTO) {\n    LOGGER.info(`Socket ${socket.id} move entity`, payload);\n    this.service.moveEntity(socket, payload);\n  }\n}\n"],"version":3}