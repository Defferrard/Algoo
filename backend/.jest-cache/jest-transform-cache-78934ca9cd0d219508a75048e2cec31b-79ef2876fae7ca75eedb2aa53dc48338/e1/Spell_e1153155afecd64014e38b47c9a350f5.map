{"file":"C:\\Github\\Algoo\\core\\src\\game\\spell\\Spell.ts","mappings":"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","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\game\\spell\\Spell.ts"],"sourcesContent":["import type { Color, Resources } from '../';\nimport type { Board, Coordinate, SimpleCoordinate } from '../../board';\nimport { Entity } from '../../board';\nimport { SpellDTO } from '../../dto';\nimport type { Node } from '../../pathfinding';\nimport type { DistanceStrategyCallable } from '../../strategy';\nimport { ACTION_STRATEGIES, ActionStrategy, DISTANCE_STRATEGIES } from '../../strategy';\nimport type { ActionResume, ActionStrategyCallable } from '../../strategy';\nimport { inRange } from 'lodash';\n\ntype SpellAction = {\n  strategy?: ActionStrategyCallable;\n  type: ActionStrategy;\n  args: { [key in string]: any };\n};\n\nexport default class Spell {\n  readonly color: Color;\n  readonly iconPath: string;\n\n  readonly name: string;\n\n  readonly minimalRangeTarget: number;\n  readonly maximalRangeTarget: number;\n  readonly targetDistanceStrategy: DistanceStrategyCallable;\n\n  readonly minimalRangeAttacked: number;\n  readonly maximalRangeAttacked: number;\n  readonly attackedDistanceStrategy: DistanceStrategyCallable;\n\n  readonly cost: Resources;\n\n  private readonly _actions: SpellAction[];\n\n  constructor(dto: SpellDTO) {\n    this.color = dto.color;\n    this.iconPath = dto.iconPath;\n    this.name = dto.name;\n\n    this.minimalRangeTarget = dto.minimalRangeTarget;\n    this.maximalRangeTarget = dto.maximalRangeTarget;\n    this.targetDistanceStrategy = DISTANCE_STRATEGIES[dto.targetDistanceStrategy!];\n\n    this.minimalRangeAttacked = dto.minimalRangeAttacked;\n    this.maximalRangeAttacked = dto.maximalRangeAttacked;\n    this.attackedDistanceStrategy = DISTANCE_STRATEGIES[dto.attackedDistanceStrategy!];\n\n    this.cost = dto.cost;\n\n    this._actions = dto.actions.map((action) => {\n      return {\n        strategy: ACTION_STRATEGIES[action.type],\n        type: action.type,\n        args: action.args,\n      };\n    });\n  }\n\n  cast(by: Entity<Resources>, from: SimpleCoordinate, to: SimpleCoordinate, on: Board): ActionResume[] {\n    const RESUME: ActionResume[] = [];\n\n    if (!by.pay(this.cost)) return RESUME;\n\n    for (let action of this._actions) {\n      RESUME.push(\n        action.strategy!(\n          this,\n          by,\n          this.attackedTiles(from, to, on).map((c: Coordinate) => on.getTile(c)),\n          action.args,\n        ),\n      );\n    }\n\n    return RESUME;\n  }\n\n  targetableTiles(from: SimpleCoordinate, board: Board, _filter: SimpleCoordinate[]): SimpleCoordinate[] {\n    const map: Node[][] = board.mapNodes;\n    let targetable: Coordinate[] = [...map.flat()].filter((n: Node) =>\n      inRange(this.targetDistanceStrategy(from, n), this.minimalRangeTarget, this.maximalRangeTarget + 1),\n    );\n\n    return targetable;\n  }\n\n  attackedTiles(from: SimpleCoordinate, to: SimpleCoordinate, board: Board): Coordinate[] {\n    const map: Node[][] = board.mapNodes;\n    let attacked: Coordinate[] = [...map.flat()].filter((n: Node) =>\n      inRange(this.attackedDistanceStrategy(to, n), this.minimalRangeAttacked, this.maximalRangeAttacked + 1),\n    );\n\n    return attacked;\n  }\n}\n"],"version":3}