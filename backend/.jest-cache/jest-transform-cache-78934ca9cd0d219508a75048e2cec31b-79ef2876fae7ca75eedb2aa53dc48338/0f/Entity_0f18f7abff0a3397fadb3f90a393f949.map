{"file":"C:\\Github\\Algoo\\core\\src\\board\\Entity.ts","mappings":";;AAGA,+BAAoC;AAEpC;;GAEG;AACH,MAAqB,MAAM;IAChB,IAAI,GAAW,IAAA,SAAM,GAAE,CAAC;IACxB,SAAS,CAAI;IAEtB,KAAK,GAAY,KAAK,CAAC,CAAC,OAAO;IAC/B,QAAQ,GAAY,KAAK,CAAC,CAAC,OAAO;IAClC,IAAI,CAAQ;IAEZ,YAAY,SAAY;QACtB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,IAAkB,EAAE,cAAyC;QAC1E,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,CAAC,CAAC;QAE7D,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,GAAG,SAAS,CAAC;IAC3C,CAAC;IAED,GAAG,CAAC,SAAoB;QACtB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YACzB,OAAO,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YAC9C,MAAM,IAAI,GAAiB,YAA4B,CAAC;YACxD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,IAAI,SAAS,CAAC,IAAI,CAAE,CAAC;QAC5C,CAAC,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,GAAG,CAAC,SAAoB;QACtB,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC,YAAoB,EAAE,EAAE;YAC3D,MAAM,IAAI,GAAiB,YAA4B,CAAC;YACxD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAE,IAAI,SAAS,CAAC,IAAI,CAAE,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAvCD,yBAuCC","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\board\\Entity.ts"],"sourcesContent":["import type { Resources } from '../game';\nimport { Team } from '../game';\nimport type { ResourceType } from '@defferrard/algoo-core/src/game/';\nimport { v4 as uuidV4 } from 'uuid';\n\n/**\n * An entity is an object that can be placed on the board.\n */\nexport default class Entity<R extends Resources> {\n  readonly uuid: string = uuidV4();\n  readonly resources: R;\n\n  floor: boolean = false; // TODO\n  playable: boolean = false; // TODO\n  team?: Team;\n\n  constructor(resources: R) {\n    this.resources = resources;\n  }\n\n  updateResource(type: ResourceType, updateFunction: (value: number) => number): number {\n    const OLD_VALUE = this.resources[type]!;\n    this.resources[type] = updateFunction(this.resources[type]!);\n\n    if (this.resources[type]! < 0) {\n      this.resources[type] = 0;\n    }\n    return this.resources[type]! - OLD_VALUE;\n  }\n\n  pay(resources: Resources): boolean {\n    if (!this.has(resources)) {\n      return false;\n    }\n    Object.keys(resources).forEach((resourceType) => {\n      const type: ResourceType = resourceType as ResourceType;\n      this.resources[type]! -= resources[type]!;\n    });\n    return true;\n  }\n\n  has(resources: Resources): boolean {\n    return Object.keys(resources).every((resourceType: string) => {\n      const type: ResourceType = resourceType as ResourceType;\n      return this.resources[type]! >= resources[type]!;\n    });\n  }\n}\n"],"version":3}