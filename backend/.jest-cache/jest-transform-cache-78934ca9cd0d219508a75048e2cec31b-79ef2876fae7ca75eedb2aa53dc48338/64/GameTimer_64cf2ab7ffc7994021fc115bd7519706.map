{"file":"C:\\Github\\Algoo\\core\\src\\game\\GameTimer.ts","mappings":";;AAAA,MAAqB,SAAS;IAC5B,QAAQ,CAAS;IACjB,YAAY,CAAS;IACb,KAAK,CAAS;IACd,KAAK,CAAS;IAEd,SAAS,CAAM;IACf,SAAS,CAAc;IAE/B;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;IAC1B,CAAC;IAED,KAAK,CAAC,QAAoB;QACxB,IAAI,IAAI,CAAC,SAAS;YAAE,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAClE,CAAC;IAED,IAAI;QACF,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,OAAO,CAAC,QAAoB;QAC1B,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACvB,CAAC;IAED,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,IAAc,IAAI;QAChB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAES,MAAM,CAAC,GAAW;QAC1B,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;YACrB,IAAI,CAAC,SAAU,EAAE,CAAC;YAClB,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAEO,OAAO;QACb,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC;IACJ,CAAC;CACF;AAvDD,4BAuDC","names":[],"sources":["C:\\Github\\Algoo\\core\\src\\game\\GameTimer.ts"],"sourcesContent":["export default class GameTimer {\n  turnTime: number;\n  intervalTime: number;\n  private _last: number;\n  private _next: number;\n\n  private _interval: any;\n  private _callback?: () => void;\n\n  constructor() {\n    this._last = Date.now();\n    this._next = this._last;\n    this.turnTime = 20000;\n    this.intervalTime = 100;\n  }\n\n  start(callback: () => void) {\n    if (this._interval) clearInterval(this._interval);\n    this._callback = callback;\n    this._last = Date.now();\n    this._next = this._last + this.turnTime;\n    this._interval = setInterval(this.getTick(), this.intervalTime);\n  }\n\n  stop() {\n    clearInterval(this._interval);\n    this._interval = undefined;\n    this._callback = undefined;\n  }\n\n  restart(callback: () => void) {\n    this.stop();\n    this.start(callback);\n  }\n\n  protected get last() {\n    return this._last;\n  }\n\n  protected get next() {\n    return this._next;\n  }\n\n  protected onTick(now: number) {\n    if (now > this._next) {\n      this._callback!();\n      clearInterval(this._interval);\n    }\n  }\n\n  private getTick() {\n    return () => {\n      this.onTick(Date.now());\n    };\n  }\n}\n"],"version":3}