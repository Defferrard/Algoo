{"file":"C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\gameRoom.test.ts","mappings":";;;;;AAAA,8DAAgE;AAChE,+BAA2D;AAC3D,6DAAmD;AAEnD,uDAA8C;AAC9C,mCAAmC;AACnC,+BAA4B;AAC5B,0DAA8B;AAC9B,wCAA0C;AAE1C,MAAM,QAAQ,GAAW,QAAQ,CAAC;AAClC,MAAM,aAAa,GAAW,cAAc,CAAC;AAC7C,QAAQ,CAAC,oBAAoB,QAAQ,EAAE,EAAE,GAAG,EAAE;IAC5C,IAAI,UAAuB,CAAC;IAC5B,IAAI,QAAkB,CAAC;IACvB,IAAI,MAAc,CAAC;IACnB,SAAS,CAAC,GAAG,EAAE;QACb,IAAA,kCAAY,EAAC,kBAAS,CAAC,CAAC;QACxB,UAAU,GAAG,IAAA,mBAAY,EAAC,SAAG,CAAC,CAAC;QAC/B,QAAQ,GAAG,IAAA,kBAAI,EAAC,UAAU,CAAC,CAAC;QAC5B,UAAU,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,kBAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IACH,QAAQ,CAAC,GAAG,EAAE;QACZ,QAAQ,CAAC,KAAK,EAAE,CAAC;QACjB,UAAU,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;QAChD,MAAM,GAAG,IAAA,qBAAE,EAAC,mBAAmB,EAAE;YAC/B,OAAO,EAAE,CAAC;SACX,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,EAAE,CAAC;QACjB,IAAI,GAAG,GAAG,MAAM,IAAA,kBAAU,EAAC,MAAM,EAAE,oBAAW,CAAC,aAAa,CAAC,CAAC;QAC9D,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC9B,qEAAqE;QACrE,oBAAoB;QACpB,EAAE;QACF,qCAAqC;QACrC,gBAAgB;QAChB,MAAM;QACN,yDAAyD;QACzD,8DAA8D;QAC9D,YAAY;QACZ,MAAM;IACR,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\socket\\controllers\\gameRoom.test.ts"],"sourcesContent":["import { MessageType } from '@defferrard/algoo-core/src/socket';\nimport { Server as HTTPSServer, createServer } from 'http';\nimport { useContainer } from 'routing-controllers';\nimport { Server as IOServer } from 'socket.io';\nimport { Socket, io } from 'socket.io-client';\nimport { Container } from 'typedi';\nimport { app } from '~/app';\nimport init from '~/socketio';\nimport { socketOnce } from '~/test/utils';\n\nconst BASE_URL: string = '/rooms';\nconst AUTH_BASE_URL: string = '/api/v1/auth';\ndescribe(`Socket Base Test ${BASE_URL}`, () => {\n  let httpServer: HTTPSServer;\n  let ioServer: IOServer;\n  let socket: Socket;\n  beforeAll(() => {\n    useContainer(Container);\n    httpServer = createServer(app);\n    ioServer = init(httpServer);\n    httpServer.listen();\n  });\n  afterEach(() => {\n    socket.close();\n    Container.reset();\n  });\n  afterAll(() => {\n    ioServer.close();\n    httpServer.close();\n  });\n\n  test('Connect without authentication', async () => {\n    socket = io(`http://localhost/`, {\n      retries: 0,\n    });\n\n    socket.connect();\n    let res = await socketOnce(socket, MessageType.CONNECT_ERROR);\n    expect(res.context.statusText.code).toBe('ECONNREFUSED');\n  });\n\n  test('Authenticate', async () => {\n    // request(app).post(`${AUTH_BASE_URL}`).expect(Status.UNAUTHORIZED);\n    // socket.connect();\n    //\n    // socket = io(`http://localhost/`, {\n    //   retries: 0,\n    // });\n    // socket.once(MessageType.CONNECT_ERROR, (err: any) => {\n    //   expect(err.context.statusText.code).toBe('ECONNREFUSED');\n    //   done();\n    // });\n  });\n});\n"],"version":3}