{"file":"C:\\Github\\Algoo\\backend\\src\\services\\GameRoomService.ts","mappings":"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","names":[],"sources":["C:\\Github\\Algoo\\backend\\src\\services\\GameRoomService.ts"],"sourcesContent":["import {\n  ChatMessageDTO,\n  IsReadyMessageDTO,\n  MessageDTO,\n  NotReadyMessageDTO,\n  ReadyMessageDTO,\n} from '@defferrard/algoo-core/src/dto';\nimport { GameRoomNotFoundException } from '@defferrard/algoo-core/src/exceptions/gameRoom';\nimport { Color, Player } from '@defferrard/algoo-core/src/game';\nimport { MessageType, User } from '@defferrard/algoo-core/src/socket';\nimport { assertNonNull } from '@defferrard/algoo-core/src/utils/assertions';\nimport { plainToInstance } from 'class-transformer';\nimport { Socket } from 'socket.io';\nimport { Service } from 'typedi';\nimport { v4 as uuid } from 'uuid';\nimport { GameRoomRepository, SocketRepository } from '~/repositories';\nimport PlayerSocket from '~/socket/sockets/PlayerSocket';\nimport { LOGGER } from '~/utils/logger';\n\n@Service()\nexport default class GameRoomService {\n  constructor(\n    public gameRoomRepository: GameRoomRepository,\n    public socketRepository: SocketRepository,\n  ) {}\n\n  joinRoom(socket: Socket, user: User, room: string) {\n    try {\n      // Fetch the game room. If it doesn't exist, an error will be thrown\n      const gameRoom = this.gameRoomRepository.get(room);\n      assertNonNull(gameRoom, GameRoomNotFoundException, room);\n      this.socketRepository.save(socket, user);\n      // Create a player and add it to the game room\n      const player: Player = new Player({\n        user,\n        team: { color: Color.BLUE, uuid: uuid(), heroes: [] },\n        isReady: false,\n      });\n      socket.data.player = player;\n      socket.data.room = room;\n      this.gameRoomRepository.addPlayer(room, player);\n      // Broadcast the join event to all other players in the room\n      socket.broadcast.emit(MessageType.GAME_ROOM_JOIN, player);\n      return gameRoom.players;\n    } catch (e) {\n      LOGGER.error(e);\n      // This async function is needed to avoid an exception due to disconnect a socket during it connection thread on a namespace.\n      const callLater = async () => {\n        socket.disconnect();\n      };\n      callLater();\n    }\n  }\n\n  leaveRoom(socket: PlayerSocket) {\n    const {\n      data: {\n        room,\n        player: {\n          user: { uuid: playerId },\n        },\n      },\n    } = socket;\n    // Remove the player from the game room\n    this.gameRoomRepository.removePlayer(room, playerId);\n    // Broadcast the leave event to all players in the room\n    const dto = plainToInstance(MessageDTO, { playerId, datetime: new Date().toISOString() });\n    socket.broadcast.emit(MessageType.GAME_ROOM_LEAVE, dto);\n  }\n\n  async sendMessage({ data: { room, player } }: PlayerSocket, message: ChatMessageDTO) {\n    await this.socketRepository.broadcast(room, MessageType.GAME_ROOM_MESSAGE, message);\n  }\n\n  isReady(socket: PlayerSocket, isReady: boolean) {\n    const { room, player } = socket.data;\n    // Set the player's ready status\n    let gameRoomReady: boolean = this.gameRoomRepository.setPlayerReady(room, player.user.uuid, isReady);\n    // Broadcast that the player is ready to all players in the room\n    let isReadyMessageDTO: IsReadyMessageDTO;\n    if (isReady) {\n      isReadyMessageDTO = new ReadyMessageDTO();\n      isReadyMessageDTO.ownTeam = {} as any;\n    } else {\n      isReadyMessageDTO = new NotReadyMessageDTO();\n    }\n    isReadyMessageDTO.datetime = new Date().toISOString();\n    isReadyMessageDTO.playerId = player.user.uuid;\n    isReadyMessageDTO.isReady = isReady;\n    this.socketRepository.broadcast(room, MessageType.GAME_ROOM_READY, isReadyMessageDTO);\n\n    // If all players are ready\n    if (gameRoomReady) {\n      // Tell all players in the room that the game is starting soon\n      this.socketRepository.broadcast(\n        room,\n        MessageType.GAME_ROOM_STARTING,\n        this.gameRoomRepository.startGame(\n          // Will return the timer before starting the game to players\n          room,\n          (data) => {\n            // Callback function, called when the game starts\n            this.socketRepository.broadcast(room, MessageType.GAME_ROOM_START, data);\n          },\n        ),\n      );\n    } else {\n      this.gameRoomRepository.cancelStartGame(\n        room,\n        // Callback function, called when the game is cancelled\n        () => this.socketRepository.broadcast(room, MessageType.CANCEL_GAME_ROOM_STARTING),\n      );\n    }\n  }\n}\n"],"version":3}