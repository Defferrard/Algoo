7c18f3a2e78eeef0be6e948c0c1244c1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const dto_1 = require("@defferrard/algoo-core/src/dto");
const gameRoom_1 = require("@defferrard/algoo-core/src/exceptions/gameRoom");
const game_1 = require("@defferrard/algoo-core/src/game");
const socket_1 = require("@defferrard/algoo-core/src/socket");
const assertions_1 = require("@defferrard/algoo-core/src/utils/assertions");
const class_transformer_1 = require("class-transformer");
const typedi_1 = require("typedi");
const uuid_1 = require("uuid");
const repositories_1 = require("~/repositories");
const logger_1 = require("~/utils/logger");
let GameRoomService = class GameRoomService {
    gameRoomRepository;
    socketRepository;
    constructor(gameRoomRepository, socketRepository) {
        this.gameRoomRepository = gameRoomRepository;
        this.socketRepository = socketRepository;
    }
    joinRoom(socket, user, room) {
        try {
            // Fetch the game room. If it doesn't exist, an error will be thrown
            const gameRoom = this.gameRoomRepository.get(room);
            (0, assertions_1.assertNonNull)(gameRoom, gameRoom_1.GameRoomNotFoundException, room);
            this.socketRepository.save(socket, user);
            // Create a player and add it to the game room
            const player = new game_1.Player({
                user,
                team: { color: game_1.Color.BLUE, uuid: (0, uuid_1.v4)(), heroes: [] },
                isReady: false,
            });
            socket.data.player = player;
            socket.data.room = room;
            this.gameRoomRepository.addPlayer(room, player);
            // Broadcast the join event to all other players in the room
            socket.broadcast.emit(socket_1.MessageType.GAME_ROOM_JOIN, player);
            return gameRoom.players;
        }
        catch (e) {
            logger_1.LOGGER.error(e);
            // This async function is needed to avoid an exception due to disconnect a socket during it connection thread on a namespace.
            const callLater = async () => {
                socket.disconnect();
            };
            callLater();
        }
    }
    leaveRoom(socket) {
        const { data: { room, player: { user: { uuid: playerId }, }, }, } = socket;
        // Remove the player from the game room
        this.gameRoomRepository.removePlayer(room, playerId);
        // Broadcast the leave event to all players in the room
        const dto = (0, class_transformer_1.plainToInstance)(dto_1.MessageDTO, { playerId, datetime: new Date().toISOString() });
        socket.broadcast.emit(socket_1.MessageType.GAME_ROOM_LEAVE, dto);
    }
    async sendMessage({ data: { room, player } }, message) {
        await this.socketRepository.broadcast(room, socket_1.MessageType.GAME_ROOM_MESSAGE, message);
    }
    isReady(socket, isReady) {
        const { room, player } = socket.data;
        // Set the player's ready status
        let gameRoomReady = this.gameRoomRepository.setPlayerReady(room, player.user.uuid, isReady);
        // Broadcast that the player is ready to all players in the room
        let isReadyMessageDTO;
        if (isReady) {
            isReadyMessageDTO = new dto_1.ReadyMessageDTO();
            isReadyMessageDTO.ownTeam = {};
        }
        else {
            isReadyMessageDTO = new dto_1.NotReadyMessageDTO();
        }
        isReadyMessageDTO.datetime = new Date().toISOString();
        isReadyMessageDTO.playerId = player.user.uuid;
        isReadyMessageDTO.isReady = isReady;
        this.socketRepository.broadcast(room, socket_1.MessageType.GAME_ROOM_READY, isReadyMessageDTO);
        // If all players are ready
        if (gameRoomReady) {
            // Tell all players in the room that the game is starting soon
            this.socketRepository.broadcast(room, socket_1.MessageType.GAME_ROOM_STARTING, this.gameRoomRepository.startGame(
            // Will return the timer before starting the game to players
            room, (data) => {
                // Callback function, called when the game starts
                this.socketRepository.broadcast(room, socket_1.MessageType.GAME_ROOM_START, data);
            }));
        }
        else {
            this.gameRoomRepository.cancelStartGame(room, 
            // Callback function, called when the game is cancelled
            () => this.socketRepository.broadcast(room, socket_1.MessageType.CANCEL_GAME_ROOM_STARTING));
        }
    }
};
GameRoomService = __decorate([
    (0, typedi_1.Service)(),
    __metadata("design:paramtypes", [repositories_1.GameRoomRepository,
        repositories_1.SocketRepository])
], GameRoomService);
exports.default = GameRoomService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,