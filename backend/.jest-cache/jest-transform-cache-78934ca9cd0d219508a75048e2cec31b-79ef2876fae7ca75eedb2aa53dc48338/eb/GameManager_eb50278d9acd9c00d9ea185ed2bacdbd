0e4d3f9c5396635d2577dfd5ce5b5386
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRandomBoard = generateRandomBoard;
const board_1 = require("../board/");
const exceptions_1 = require("../exceptions");
const gameManager_1 = require("../exceptions/gameManager");
const assertions_1 = require("../utils/assertions");
const _1 = require("./");
const HeroEntity_1 = require("./hero/HeroEntity");
function generateRandomBoard(width, height, wallProbability) {
    let map = [];
    for (let y = 0; y < height; y++) {
        map[y] = new Array(width);
        for (let x = 0; x < width; x++) {
            map[y][x] = Math.random() < wallProbability ? board_1.TileType.Wall : board_1.TileType.Floor;
        }
    }
    return map;
}
class GameManager {
    // Whether the client is currently animating.
    // TODO : Use a buffer !
    _board;
    _turnIndex = 0;
    _teams = [];
    _entities = {};
    constructor(dto) {
        this._board = new board_1.Board(dto.tiles);
    }
    pushTeam(team) {
        if (this._teams.find((t) => t.uuid === team.uuid)) {
            throw new exceptions_1.TeamAlreadyExistsException(team);
        }
        if (team.entities.length > 0) {
            throw new exceptions_1.TeamNotEmptyException(team);
        }
        this._teams.push(team);
    }
    pushEntity(entity, coordinate) {
        if (!entity.team)
            throw new gameManager_1.InvalidEntityException(entity);
        const TEAM = this._teams.find((t) => t.uuid === entity.team?.uuid);
        if (!TEAM)
            throw new exceptions_1.TeamNotExistsException(TEAM);
        this._board.pushEntity(entity, coordinate);
        TEAM.pushEntity(entity);
    }
    moveEntity(entity, path) {
        if (!Object.hasOwn(entity.resources, _1.ResourceType.STAMINA))
            throw new gameManager_1.InvalidEntityException(entity);
        while (path.length > 0) {
            let coordinate = path.pop();
            this.moveEntityTo(entity, coordinate);
        }
    }
    moveEntityTo(entity, coordinate) {
        this._board.moveEntity(entity, coordinate);
        entity.resources[_1.ResourceType.STAMINA] += this._board.getTile(coordinate).movementCost;
    }
    deleteEntity(entity) {
        this._teams.find((t) => t.entities.find((e) => e.uuid === entity.uuid)).deleteEntity(entity);
        this._board.deleteEntity(entity);
    }
    castSpell(spell, coordinate) {
        const CASTER = this.currentHero;
        return spell.cast(CASTER, this.board.getEntityCoordinate(CASTER), coordinate, this.board);
    }
    nextTurn() {
        // TODO : Better Event Handler
        (0, assertions_1.notUndefined)(this.currentHero).onEndTurn();
        this._turnIndex++;
    }
    get currentEntity() {
        if (this._teams.length <= 0)
            return undefined;
        const TEAM_INDEX = this._turnIndex % this._teams.length;
        if (this._teams[TEAM_INDEX].entities.length <= 0)
            return undefined;
        const HERO_INDEX = Math.floor((this._turnIndex / this._teams.length) % this._teams[TEAM_INDEX].entities.length);
        return this._teams[TEAM_INDEX].entities[HERO_INDEX];
    }
    get currentHero() {
        const currentEntity = this.currentEntity;
        if ((0, HeroEntity_1.isHeroEntity)(currentEntity))
            return currentEntity;
    }
    get board() {
        return this._board;
    }
}
exports.default = GameManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,