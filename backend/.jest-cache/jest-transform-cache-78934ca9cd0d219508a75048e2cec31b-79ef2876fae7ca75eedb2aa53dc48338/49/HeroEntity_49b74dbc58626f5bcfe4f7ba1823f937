e9abe929ab289f3748799ac473176c6c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHeroEntity = isHeroEntity;
const Entity_1 = __importDefault(require("../../board/Entity"));
const ResourceType_1 = require("../characteristics/ResourceType");
const StandardCharacteristics_1 = require("../characteristics/StandardCharacteristics");
const Spell_1 = __importDefault(require("../spell/Spell"));
function isHeroEntity(entity) {
    return (entity !== undefined &&
        entity.name !== undefined &&
        entity.title !== undefined &&
        entity.characteristics !== undefined &&
        entity.spells !== undefined &&
        entity.effects !== undefined &&
        entity.stance !== undefined);
}
class HeroEntity extends Entity_1.default {
    name;
    title;
    characteristics;
    spells;
    effects;
    stance;
    constructor(dto) {
        super(dto.characteristics);
        // TODO : Can we simplify ? (Can we generate maxResources dynamically from dto.characteristics ?)
        const CHARACTERISTICS = new StandardCharacteristics_1.StandardCharacteristics({
            [ResourceType_1.ResourceType.HEALTH]: dto.characteristics[ResourceType_1.ResourceType.HEALTH],
            [ResourceType_1.ResourceType.STAMINA]: dto.characteristics[ResourceType_1.ResourceType.STAMINA],
        }, dto.characteristics.strength, dto.characteristics.resistance, dto.characteristics.durability);
        this.name = dto.name;
        this.title = dto.title;
        this.characteristics = CHARACTERISTICS;
        this.spells = dto.spells.map((spell) => new Spell_1.default(spell));
        this.effects = [];
        this.stance = dto.stance;
    }
    onEndTurn() {
        this.resources[ResourceType_1.ResourceType.STAMINA] += this.characteristics.durability;
        this.resources[ResourceType_1.ResourceType.STAMINA] = Math.min(this.resources[ResourceType_1.ResourceType.STAMINA], this.characteristics.max[ResourceType_1.ResourceType.STAMINA]);
    }
    updateResource(type, updateFunction) {
        const OLD_VALUE = this.resources[type];
        super.updateResource(type, updateFunction);
        if (this.resources[type] > this.characteristics.max[type]) {
            this.resources[type] = this.characteristics.max[type];
        }
        return this.resources[type] - OLD_VALUE;
    }
}
exports.default = HeroEntity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xcZ2FtZVxcaGVyb1xcSGVyb0VudGl0eS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQVNBLG9DQVVDO0FBbkJELGdFQUF3QztBQUl4QyxrRUFBK0Q7QUFDL0Qsd0ZBQXdHO0FBQ3hHLDJEQUFtQztBQUduQyxTQUFnQixZQUFZLENBQUMsTUFBMEI7SUFDckQsT0FBTyxDQUNMLE1BQU0sS0FBSyxTQUFTO1FBQ25CLE1BQXFCLENBQUMsSUFBSSxLQUFLLFNBQVM7UUFDeEMsTUFBcUIsQ0FBQyxLQUFLLEtBQUssU0FBUztRQUN6QyxNQUFxQixDQUFDLGVBQWUsS0FBSyxTQUFTO1FBQ25ELE1BQXFCLENBQUMsTUFBTSxLQUFLLFNBQVM7UUFDMUMsTUFBcUIsQ0FBQyxPQUFPLEtBQUssU0FBUztRQUMzQyxNQUFxQixDQUFDLE1BQU0sS0FBSyxTQUFTLENBQzVDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBcUIsVUFBVyxTQUFRLGdCQUF5QjtJQUN0RCxJQUFJLENBQVM7SUFDYixLQUFLLENBQVM7SUFDZCxlQUFlLENBQTBCO0lBQ3pDLE1BQU0sQ0FBVTtJQUNoQixPQUFPLENBQVc7SUFDM0IsTUFBTSxDQUFTO0lBRWYsWUFBWSxHQUFvQjtRQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRTNCLGlHQUFpRztRQUNqRyxNQUFNLGVBQWUsR0FBNEIsSUFBSSxpREFBdUIsQ0FDMUU7WUFDRSxDQUFDLDJCQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQywyQkFBWSxDQUFDLE1BQU0sQ0FBQztZQUMvRCxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxDQUFDLGVBQWUsQ0FBQywyQkFBWSxDQUFDLE9BQU8sQ0FBQztTQUNsRSxFQUNELEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUM1QixHQUFHLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFDOUIsR0FBRyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQy9CLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksZUFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQzNCLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQywyQkFBWSxDQUFDLE9BQU8sQ0FBRSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxTQUFTLENBQUMsMkJBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFFLEVBQ3JDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLDJCQUFZLENBQUMsT0FBTyxDQUFFLENBQ2hELENBQUM7SUFDSixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQWtCLEVBQUUsY0FBeUM7UUFDMUUsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUN4QyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMzQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFFLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBQztZQUM1RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBRSxDQUFDO1FBQ3pELENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFFLEdBQUcsU0FBUyxDQUFDO0lBQzNDLENBQUM7Q0FDRjtBQTlDRCw2QkE4Q0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXEdpdGh1YlxcQWxnb29cXGNvcmVcXHNyY1xcZ2FtZVxcaGVyb1xcSGVyb0VudGl0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRW50aXR5IGZyb20gJy4uLy4uL2JvYXJkL0VudGl0eSc7XG5pbXBvcnQgeyBDb21wbGV0ZUhlcm9EVE8gfSBmcm9tICcuLi8uLi9kdG8vQ29tcGxldGVIZXJvRFRPJztcbmltcG9ydCBFZmZlY3QgZnJvbSAnLi4vRWZmZWN0JztcbmltcG9ydCB7IFJlc291cmNlcyB9IGZyb20gJy4uL2NoYXJhY3RlcmlzdGljcy9DaGFyYWN0ZXJpc3RpY3MnO1xuaW1wb3J0IHsgUmVzb3VyY2VUeXBlIH0gZnJvbSAnLi4vY2hhcmFjdGVyaXN0aWNzL1Jlc291cmNlVHlwZSc7XG5pbXBvcnQgeyBTdGFuZGFyZENoYXJhY3RlcmlzdGljcywgU3RhbmRhcmRSZXNvdXJjZXMgfSBmcm9tICcuLi9jaGFyYWN0ZXJpc3RpY3MvU3RhbmRhcmRDaGFyYWN0ZXJpc3RpY3MnO1xuaW1wb3J0IFNwZWxsIGZyb20gJy4uL3NwZWxsL1NwZWxsJztcbmltcG9ydCB7IFN0YW5jZSB9IGZyb20gJy4vU3RhbmNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzSGVyb0VudGl0eShlbnRpdHk/OiBFbnRpdHk8UmVzb3VyY2VzPik6IGVudGl0eSBpcyBIZXJvRW50aXR5IHtcbiAgcmV0dXJuIChcbiAgICBlbnRpdHkgIT09IHVuZGVmaW5lZCAmJlxuICAgIChlbnRpdHkgYXMgSGVyb0VudGl0eSkubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgKGVudGl0eSBhcyBIZXJvRW50aXR5KS50aXRsZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgKGVudGl0eSBhcyBIZXJvRW50aXR5KS5jaGFyYWN0ZXJpc3RpY3MgIT09IHVuZGVmaW5lZCAmJlxuICAgIChlbnRpdHkgYXMgSGVyb0VudGl0eSkuc3BlbGxzICE9PSB1bmRlZmluZWQgJiZcbiAgICAoZW50aXR5IGFzIEhlcm9FbnRpdHkpLmVmZmVjdHMgIT09IHVuZGVmaW5lZCAmJlxuICAgIChlbnRpdHkgYXMgSGVyb0VudGl0eSkuc3RhbmNlICE9PSB1bmRlZmluZWRcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVyb0VudGl0eSBleHRlbmRzIEVudGl0eTxTdGFuZGFyZFJlc291cmNlcz4ge1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGNoYXJhY3RlcmlzdGljczogU3RhbmRhcmRDaGFyYWN0ZXJpc3RpY3M7XG4gIHJlYWRvbmx5IHNwZWxsczogU3BlbGxbXTtcbiAgcmVhZG9ubHkgZWZmZWN0czogRWZmZWN0W107XG4gIHN0YW5jZTogU3RhbmNlO1xuXG4gIGNvbnN0cnVjdG9yKGR0bzogQ29tcGxldGVIZXJvRFRPKSB7XG4gICAgc3VwZXIoZHRvLmNoYXJhY3RlcmlzdGljcyk7XG5cbiAgICAvLyBUT0RPIDogQ2FuIHdlIHNpbXBsaWZ5ID8gKENhbiB3ZSBnZW5lcmF0ZSBtYXhSZXNvdXJjZXMgZHluYW1pY2FsbHkgZnJvbSBkdG8uY2hhcmFjdGVyaXN0aWNzID8pXG4gICAgY29uc3QgQ0hBUkFDVEVSSVNUSUNTOiBTdGFuZGFyZENoYXJhY3RlcmlzdGljcyA9IG5ldyBTdGFuZGFyZENoYXJhY3RlcmlzdGljcyhcbiAgICAgIHtcbiAgICAgICAgW1Jlc291cmNlVHlwZS5IRUFMVEhdOiBkdG8uY2hhcmFjdGVyaXN0aWNzW1Jlc291cmNlVHlwZS5IRUFMVEhdLFxuICAgICAgICBbUmVzb3VyY2VUeXBlLlNUQU1JTkFdOiBkdG8uY2hhcmFjdGVyaXN0aWNzW1Jlc291cmNlVHlwZS5TVEFNSU5BXSxcbiAgICAgIH0sXG4gICAgICBkdG8uY2hhcmFjdGVyaXN0aWNzLnN0cmVuZ3RoLFxuICAgICAgZHRvLmNoYXJhY3RlcmlzdGljcy5yZXNpc3RhbmNlLFxuICAgICAgZHRvLmNoYXJhY3RlcmlzdGljcy5kdXJhYmlsaXR5LFxuICAgICk7XG5cbiAgICB0aGlzLm5hbWUgPSBkdG8ubmFtZTtcbiAgICB0aGlzLnRpdGxlID0gZHRvLnRpdGxlO1xuICAgIHRoaXMuY2hhcmFjdGVyaXN0aWNzID0gQ0hBUkFDVEVSSVNUSUNTO1xuICAgIHRoaXMuc3BlbGxzID0gZHRvLnNwZWxscy5tYXAoKHNwZWxsKSA9PiBuZXcgU3BlbGwoc3BlbGwpKTtcbiAgICB0aGlzLmVmZmVjdHMgPSBbXTtcbiAgICB0aGlzLnN0YW5jZSA9IGR0by5zdGFuY2U7XG4gIH1cblxuICBvbkVuZFR1cm4oKSB7XG4gICAgdGhpcy5yZXNvdXJjZXNbUmVzb3VyY2VUeXBlLlNUQU1JTkFdISArPSB0aGlzLmNoYXJhY3RlcmlzdGljcy5kdXJhYmlsaXR5O1xuICAgIHRoaXMucmVzb3VyY2VzW1Jlc291cmNlVHlwZS5TVEFNSU5BXSA9IE1hdGgubWluKFxuICAgICAgdGhpcy5yZXNvdXJjZXNbUmVzb3VyY2VUeXBlLlNUQU1JTkFdISxcbiAgICAgIHRoaXMuY2hhcmFjdGVyaXN0aWNzLm1heFtSZXNvdXJjZVR5cGUuU1RBTUlOQV0hLFxuICAgICk7XG4gIH1cblxuICB1cGRhdGVSZXNvdXJjZSh0eXBlOiBSZXNvdXJjZVR5cGUsIHVwZGF0ZUZ1bmN0aW9uOiAodmFsdWU6IG51bWJlcikgPT4gbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBPTERfVkFMVUUgPSB0aGlzLnJlc291cmNlc1t0eXBlXSE7XG4gICAgc3VwZXIudXBkYXRlUmVzb3VyY2UodHlwZSwgdXBkYXRlRnVuY3Rpb24pO1xuICAgIGlmICh0aGlzLnJlc291cmNlc1t0eXBlXSEgPiB0aGlzLmNoYXJhY3RlcmlzdGljcy5tYXhbdHlwZV0hKSB7XG4gICAgICB0aGlzLnJlc291cmNlc1t0eXBlXSA9IHRoaXMuY2hhcmFjdGVyaXN0aWNzLm1heFt0eXBlXSE7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc291cmNlc1t0eXBlXSEgLSBPTERfVkFMVUU7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==